from dotenv import load_dotenv
import telebot
from telebot import types
import json
import os

load_dotenv()
# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TOKEN_STORYTELLER'))
ADMIN_ID = int(os.getenv('ADMIN_ID'))

DATA_FILE = 'story.json'  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ story.json

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç KeyError
def load_data():
    default = {"stories": [], "current_index": {}, "chapters": []}
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {
                    "stories": data.get("stories", []),
                    "current_index": data.get("current_index", {}),
                    "chapters": data.get("chapters", [])
                }
        return default
    except Exception as e:
        print(f"Error loading data: {e}")
        return default

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()
stories = data["stories"]
current_index = {k: int(v) for k, v in data["current_index"].items()}
chapters = data["chapters"]
user_states = {}
last_messages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
user_last_messages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ['üìñ –ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'üìë –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ']
    if user_id == ADMIN_ID:
        buttons.append('üõ† –°–æ–∑–¥–∞—Ç–µ–ª—å')
    markup.add(*buttons)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StoryBot! üåü",
        reply_markup=main_menu(message.from_user.id)
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π
@bot.message_handler(func=lambda m: m.text == 'üõ† –°–æ–∑–¥–∞—Ç–µ–ª—å' and m.from_user.id == ADMIN_ID)
def admin_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ['üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'üìö –ì–ª–∞–≤—ã', 'üñº –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' and m.from_user.id == ADMIN_ID)
def request_story(message):
    user_states[message.chat.id] = 'awaiting_story'
    bot.send_message(message.chat.id, "üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è —á–∞—Å—Ç–∏ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏:")

@bot.message_handler(func=lambda m: m.chat.id in user_states and user_states[m.chat.id] == 'awaiting_story')
def handle_story(message):
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return
    
    if message.from_user.id != ADMIN_ID:
        return
    
    parts = [p.strip() for p in message.text.split('\n\n') if p.strip()]
    
    if parts:
        stories.extend(parts)
        save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(parts)} –Ω–æ–≤—ã—Ö –≥–ª–∞–≤!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    
    del user_states[message.chat.id]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤
@bot.message_handler(func=lambda m: m.text == 'üìö –ì–ª–∞–≤—ã' and m.from_user.id == ADMIN_ID)
def request_chapter_name(message):
    user_states[message.chat.id] = 'awaiting_chapter_name'
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã:")

@bot.message_handler(func=lambda m: m.chat.id in user_states and user_states[m.chat.id] == 'awaiting_chapter_name')
def handle_chapter_name(message):
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return
    
    if message.from_user.id != ADMIN_ID:
        return
    
    chapter_name = message.text.strip()
    user_states[message.chat.id] = 'awaiting_chapter_index'
    user_states[f"{message.chat.id}_chapter_name"] = chapter_name
    bot.send_message(message.chat.id, f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –≥–ª–∞–≤—É '{chapter_name}':")

@bot.message_handler(func=lambda m: m.chat.id in user_states and user_states[m.chat.id] == 'awaiting_chapter_index')
def handle_chapter_index(message):
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return
    
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        index = int(message.text.strip()) - 1
        if 0 <= index < len(stories):
            chapter_name = user_states[f"{message.chat.id}_chapter_name"]
            chapters.append({"name": chapter_name, "index": index})
            save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
            bot.reply_to(message, f"‚úÖ –ì–ª–∞–≤–∞ '{chapter_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    del user_states[message.chat.id]
    del user_states[f"{message.chat.id}_chapter_name"]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@bot.message_handler(func=lambda m: m.text == 'üñº –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π' and m.from_user.id == ADMIN_ID)
def request_photo_story(message):
    user_states[message.chat.id] = 'awaiting_photo_story'
    bot.send_message(message.chat.id, "üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:")

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    file_id = message.photo[-1].file_id
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç
    if message.chat.id in user_states and user_states[message.chat.id] == 'awaiting_photo_story':
        user_states[f"{message.chat.id}_photo_id"] = file_id
        bot.send_message(message.chat.id, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:")
    else:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ—ë –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        for i, story in enumerate(stories):
            if isinstance(story, str):  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
                stories[i] = {"type": "photo", "photo_id": file_id, "text": story}
                save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
                bot.reply_to(message, f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≥–ª–∞–≤–µ {i+1}!")
                break
        else:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")

@bot.message_handler(func=lambda m: m.chat.id in user_states and user_states[m.chat.id] == 'awaiting_photo_story' and f"{m.chat.id}_photo_id" in user_states)
def handle_photo_story_text(message):
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return
    
    if message.from_user.id != ADMIN_ID:
        return
    
    photo_id = user_states[f"{message.chat.id}_photo_id"]
    text = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    stories.append({"type": "photo", "photo_id": photo_id, "text": text})
    save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
    bot.reply_to(message, f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    del user_states[message.chat.id]
    del user_states[f"{message.chat.id}_photo_id"]

# –ú–µ–Ω—é –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == 'üìë –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ')
def show_chapters(message):
    if not chapters:
        bot.send_message(message.chat.id, "üì≠ –ì–ª–∞–≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [chapter["name"] for chapter in chapters]
    buttons.append('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(*buttons)
    bot.send_message(message.chat.id, "üìë –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in [chapter["name"] for chapter in chapters])
def navigate_to_chapter(message):
    chapter = next((ch for ch in chapters if ch["name"] == message.text), None)
    if chapter:
        current_index[message.chat.id] = chapter["index"]
        save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
        show_page(message.chat.id)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
def story_nav_markup(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    index = current_index.get(chat_id, 0)
    
    buttons = []
    buttons.append('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    if index > 0:
        buttons.append('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    if index < len(stories) - 1:
        buttons.append('‚û°Ô∏è –í–ø–µ—Ä–µ–¥')
    
    markup.add(*buttons)
    return markup

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
@bot.message_handler(func=lambda m: m.text == 'üìñ –ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é')
def start_story(message):
    if not stories:
        bot.send_message(message.chat.id, "üì≠ –ò—Å—Ç–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
        return
    
    current_index[message.chat.id] = 0
    save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
    show_page(message.chat.id)

def show_page(chat_id):
    index = current_index.get(chat_id, 0)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        story = stories[index]
        if isinstance(story, str):  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            text = f"üìñ –ì–ª–∞–≤–∞ {index+1}/{len(stories)}\n\n{story}"
            msg = bot.send_message(chat_id, text, reply_markup=story_nav_markup(chat_id))
        elif isinstance(story, dict) and story.get("type") == "photo":  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            photo_id = story["photo_id"]
            text = f"üìñ –ì–ª–∞–≤–∞ {index+1}/{len(stories)}\n\n{story['text']}"
            msg = bot.send_photo(chat_id, photo=photo_id, caption=text, reply_markup=story_nav_markup(chat_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_message_id = msg.message_id
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∞
        if chat_id in last_messages:
            for msg_id in last_messages[chat_id]:
                if msg_id != new_message_id:  # –ù–µ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
            last_messages[chat_id] = [new_message_id]  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id in user_last_messages:
            for msg_id in user_last_messages[chat_id]:
                try:
                    bot.delete_message(chat_id, msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            user_last_messages[chat_id] = []
        
    except IndexError:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=main_menu(chat_id))        
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@bot.message_handler(func=lambda m: m.text in ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', '‚û°Ô∏è –í–ø–µ—Ä–µ–¥'])
def navigate_story(message):
    chat_id = message.chat.id
    if chat_id not in current_index:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if chat_id not in user_last_messages:
        user_last_messages[chat_id] = []
    user_last_messages[chat_id].append(message.message_id)
    
    delta = -1 if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' else 1
    new_index = current_index[chat_id] + delta
    
    if 0 <= new_index < len(stories):
        current_index[chat_id] = new_index
        save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
        show_page(chat_id)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def return_to_menu(message):
    chat_id = message.chat.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if chat_id in user_states:
        del user_states[chat_id]
        if f"{chat_id}_photo_id" in user_states:
            del user_states[f"{chat_id}_photo_id"]
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(chat_id))
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if chat_id in current_index:
            del current_index[chat_id]
            save_data({"stories": stories, "current_index": current_index, "chapters": chapters})
        send_welcome(message)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
