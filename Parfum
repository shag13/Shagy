from dotenv import load_dotenv
import telebot
from telebot import types
import json
import os
from collections import defaultdict

load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN_PARFUM'))
ADMIN_ID = os.getenv("ADMIN_ID")

ADMIN_ID = 103329587
DATA_FILE = "user_data.json"
PERFUMES_FILE = "perfumes.json"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        user_data = defaultdict(lambda: {
            'test_in_progress': False,
            'test_answers': [],
            'current_question': 0,
            'cart': [],
            'orders': {},
            'order_counter': 1,
            'recommendations': []
        }, json.load(f))
else:
    user_data = defaultdict(lambda: {
        'test_in_progress': False,
        'test_answers': [],
        'current_question': 0,
        'cart': [],
        'orders': {},
        'order_counter': 1,
        'recommendations': []
    })

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(dict(user_data), f, ensure_ascii=False, indent=2)
        
def initialize_user(chat_id):
    if 'order_counter' not in user_data[chat_id]:
        user_data[chat_id]['order_counter'] = 1
    if 'cart' not in user_data[chat_id]:
        user_data[chat_id]['cart'] = []
    if 'orders' not in user_data[chat_id]:
        user_data[chat_id]['orders'] = {}
    if 'recommendations' not in user_data[chat_id]:
        user_data[chat_id]['recommendations'] = []

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä—Ñ—é–º–∞—Ö
if os.path.exists(PERFUMES_FILE):
    with open(PERFUMES_FILE, "r", encoding="utf-8") as f:
        perfumes = json.load(f)
else:
    perfumes = [
        {"id": 1, "name": "Chanel ‚Ññ5", "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –∞—Ä–æ–º–∞—Ç —Å –Ω–æ—Ç–∞–º–∏ –∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥–∞ –∏ –∂–∞—Å–º–∏–Ω–∞ üå∏"},
        {"id": 2, "name": "Dior Sauvage", "description": "–°–≤–µ–∂–∏–π –º—É–∂—Å–∫–æ–π –∞—Ä–æ–º–∞—Ç —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏ –±–µ—Ä–≥–∞–º–æ—Ç–∞ –∏ –∞–º–±—Ä–æ–∫—Å–∞–Ω–∞ üèî"},
        {"id": 3, "name": "YSL Black Opium", "description": "–°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç —Å –∫–æ—Ñ–µ –∏ –≤–∞–Ω–∏–ª—å—é ‚òïÔ∏è"},
        {"id": 4, "name": "Creed Aventus", "description": "–≠–ª–∏—Ç–Ω—ã–π –º—É–∂—Å–∫–æ–π –∞—Ä–æ–º–∞—Ç —Å –∞–Ω–∞–Ω–∞—Å–æ–º –∏ –±–µ—Ä–µ–∑–æ–π üçç"}
    ]

def save_perfumes():
    with open(PERFUMES_FILE, "w", encoding="utf-8") as f:
        json.dump(perfumes, f, ensure_ascii=False, indent=2)

volumes = ["50_–º–ª", "100_–º–ª", "150_–º–ª", "200_–º–ª"]

questions = [
    {
        'text': "üå∏ *–ê—Ä–æ–º–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏...*\n–ö–∞–∫–æ–π —Ç–∏–ø –∞—Ä–æ–º–∞—Ç–∞ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
        'options': [
            "–¶–≤–µ—Ç–æ—á–Ω—ã–π üåπ (—Ä–æ–∑—ã, –∂–∞—Å–º–∏–Ω, –ª–∞–≤–∞–Ω–¥–∞)",
            "–î—Ä–µ–≤–µ—Å–Ω—ã–π üå≤ (—Å–∞–Ω–¥–∞–ª, –∫–µ–¥—Ä, –ø–∞—á—É–ª–∏)",
            "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π üçä (–ª–∏–º–æ–Ω, –∞–ø–µ–ª—å—Å–∏–Ω, –±–µ—Ä–≥–∞–º–æ—Ç)",
            "–í–æ—Å—Ç–æ—á–Ω—ã–π üïå (–≤–∞–Ω–∏–ª—å, –∞–º–±—Ä–∞, –º—É—Å–∫—É—Å)",
            "–°–≤–µ–∂–∏–π/–º–æ—Ä—Å–∫–æ–π üåä (–º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑, –∑–µ–ª–µ–Ω—å)",
            "–°–ª–∞–¥–∫–∏–π/–≤–∞–Ω–∏–ª—å–Ω—ã–π üçÆ (–≤–∞–Ω–∏–ª—å, –∫–∞—Ä–∞–º–µ–ª—å)",
            "–ù–µ –∑–Ω–∞—é, —Ö–æ—á—É –Ω–µ–æ–±—ã—á–Ω–æ–µ ‚ú®"
        ]
    },
    {
        'text': "üí´ *–•–∞—Ä–∞–∫—Ç–µ—Ä –∞—Ä–æ–º–∞—Ç–∞:*\n–ö–∞–∫–æ–π —Ç–µ–±–µ –±–ª–∏–∂–µ?",
        'options': [
            "–õ–µ–≥–∫–∏–π, –µ–¥–≤–∞ —É–ª–æ–≤–∏–º—ã–π ‚òÅÔ∏è (–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π)",
            "–°—Ä–µ–¥–Ω–∏–π, –∑–∞–º–µ—Ç–Ω—ã–π üìå (—Ä–∞–±–æ—Ç–∞/–≤—Å—Ç—Ä–µ—á–∏)",
            "–ù–∞—Å—ã—â–µ–Ω–Ω—ã–π, —Å—Ç–æ–π–∫–∏–π üåë (–≤–µ—á–µ—Ä/–æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏)",
            "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π üåü (–¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è)"
        ]
    },
    {
        'text': "üåç *–î–ª—è –∫–∞–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏—â–µ—à—å –ø–∞—Ä—Ñ—é–º?*",
        'options': [
            "–õ–µ—Ç–æ üåû (—Å–≤–µ–∂–∏–µ –∞—Ä–æ–º–∞—Ç—ã)",
            "–ó–∏–º–∞ ‚ùÑÔ∏è (—Ç–µ–ø–ª—ã–µ –∞—Ä–æ–º–∞—Ç—ã)",
            "–í–µ—Å–Ω–∞/–æ—Å–µ–Ω—å üçÇ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)",
            "–ö—Ä—É–≥–ª—ã–π –≥–æ–¥ üóì"
        ]
    },
    {
        'text': "üîÆ *–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º —Ñ–ª–∞–∫–æ–Ω–∞:*",
        'options': [
            "10 –º–ª üíé (–º–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–π)",
            "30 –º–ª üìå (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)",
            "50 –º–ª üß™ (–¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤)",
            "100 –º–ª üèÜ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)"
        ]
    },
    {
        'text': "üéµ *–õ—é–±–∏–º—ã–µ –Ω–æ—Ç–∫–∏ –≤ –∞—Ä–æ–º–∞—Ç–µ:*",
        'options': [
            "–í–∞–Ω–∏–ª—å üç¶",
            "–ñ–∞—Å–º–∏–Ω üåº",
            "–°–∞–Ω–¥–∞–ªü™µ",
            "–ë–µ—Ä–≥–∞–º–æ—Ç üçä",
            "–ú—É—Å–∫—É—Å ü¶å",
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå"
        ]
    },
    {
        'text': "üíÉ *–ö–∞–∫–æ–π –æ–±—Ä–∞–∑ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å?*",
        'options': [
            "–£—Ç–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç—å –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å üëë",
            "–°–º–µ–ª–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ü¶Å",
            "–ù–µ–∂–Ω–æ—Å—Ç—å –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ—Å—Ç—å üíê",
            "–≠–Ω–µ—Ä–≥–∏—é –∏ —Å–≤–µ–∂–µ—Å—Ç—å ‚ö°Ô∏è",
            "–ó–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–∏–Ω—É üåå",
            "–£—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç üõã",
            "–î—Ä—É–≥–æ–µ ‚úçÔ∏è"
        ]
    },
    {
        'text': "üîÑ *–ö–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*",
        'options': [
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ üóì",
            "–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ üéâ",
            "–ò–Ω–æ–≥–¥–∞ üåà",
            "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ‚öñÔ∏è"
        ]
    }
]

@bot.message_handler(commands=['start'])
def send_welcome(message):
    initialize_user(message.chat.id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå")
    if message.from_user.id == ADMIN_ID:
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç?",
        reply_markup=markup
    )
                    
def generate_recommendations(answers):
    recommendations = []
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answers —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if len(answers) >= 7:
            q1, q2, q3, q4, q5, q6, q7 = answers[:7]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 –æ—Ç–≤–µ—Ç–æ–≤

            if q1 in [0, 6] or q5 == 1 or q6 == 0:
                rec = "üå∫ *Chanel ‚Ññ5* - –¶–≤–µ—Ç–æ—á–Ω—ã–π –∞—Ä–æ–º–∞—Ç –¥–ª—è —É—Ç–æ–Ω—á–µ–Ω–Ω—ã—Ö –Ω–∞—Ç—É—Ä"
                if rec not in recommendations:
                    recommendations.append(rec)

            if q2 in [0, 3] or q3 == 3 or q7 in [0, 3]:
                rec = "üåä *Dior Sauvage* - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–≤–µ–∂–∏–π –∞—Ä–æ–º–∞—Ç"
                if rec not in recommendations:
                    recommendations.append(rec)

            if q1 in [3, 5] or q3 == 1 or q2 == 2:
                rec = "‚òïÔ∏è *YSL Black Opium* - –°–ª–∞–¥–∫–∏–π –≤–µ—á–µ—Ä–Ω–∏–π –∞—Ä–æ–º–∞—Ç"
                if rec not in recommendations:
                    recommendations.append(rec)

            if q1 == 1 or q6 == 1 or q7 == 1:
                rec = "üçç *Creed Aventus* - –°—Ç–∞—Ç—É—Å–Ω—ã–π –¥—Ä–µ–≤–µ—Å–Ω—ã–π –∞—Ä–æ–º–∞—Ç"
                if rec not in recommendations:
                    recommendations.append(rec)

        return recommendations

    except Exception as e:
        print(f"Error generating recommendations: {e}")
        return ["–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üò¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞!"]
                    
def start_test(chat_id):
    user_data[chat_id]['test_in_progress'] = True
    user_data[chat_id]['current_question'] = 0
    ask_question(chat_id)

def ask_question(chat_id):
    question = questions[user_data[chat_id]['current_question']]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    for i, option in enumerate(question['options']):
        markup.add(f"{i+1}. {option}")
        
    bot.send_message(chat_id, 
                    f"*–í–æ–ø—Ä–æ—Å {user_data[chat_id]['current_question']+1}/{len(questions)}*\n" + 
                    question['text'], 
                    parse_mode="Markdown",
                    reply_markup=markup)

def process_test_step(message):
    chat_id = message.chat.id
    if message.text == "–î–∞ ‚úÖ":
        start_test(chat_id)
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ú–µ–Ω—é üì≤")
        bot.send_message(chat_id, "üëâ –ù–∞–∂–º–∏ '–ú–µ–Ω—é üì≤' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=markup)
        
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product(message):
    if message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ñ—é–º–∞:")
        bot.register_next_step_handler(msg, process_name_step)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        
def process_name_step(message):
    chat_id = message.chat.id
    name = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ñ—é–º–∞:")
    bot.register_next_step_handler(msg, process_description_step, name)

def process_description_step(message, name):
    chat_id = message.chat.id
    description = message.text

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Ñ—é–º
    new_perfume = {
        "id": len(perfumes) + 1,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        "name": name,
        "description": description
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ñ—é–º –≤ —Å–ø–∏—Å–æ–∫
    perfumes.append(new_perfume)
    save_perfumes()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ñ—é–º–∞—Ö –≤ —Ñ–∞–π–ª
    bot.send_message(chat_id, f"‚úÖ –ü–∞—Ä—Ñ—é–º '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message)

def process_test_answer(message):
    chat_id = message.chat.id
    current = user_data[chat_id]['current_question']

    try:
        answer = int(message.text.split('.')[0]) - 1
        user_data[chat_id]['test_answers'].append(answer)
    except:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        return

    if current + 1 < len(questions):
        user_data[chat_id]['current_question'] += 1
        ask_question(chat_id)
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        new_recs = generate_recommendations(user_data[chat_id]['test_answers'])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        existing_recs = user_data[chat_id].get('recommendations', [])
        combined_recs = list(set(existing_recs + new_recs))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏

        user_data[chat_id]['recommendations'] = combined_recs
        user_data[chat_id]['test_in_progress'] = False

        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        bot.send_message(chat_id,
                        "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!* –í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n" +
                        "\n".join([f"‚û°Ô∏è {r}" for r in combined_recs]),
                        parse_mode="Markdown")

        show_main_menu(message)
        save_data()
        
def show_main_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üåü –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations"),
        types.InlineKeyboardButton("üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order"),
        types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="retake_test"),
        types.InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
        types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
        types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        types.InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
        types.InlineKeyboardButton("üìù –û—Ç–∑—ã–≤—ã", callback_data="reviews")
    ]
    markup.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.add("–ú–µ–Ω—é üì≤")
    if message.from_user.id == ADMIN_ID:
        reply_markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    
    bot.send_message(message.chat.id, 
                    "üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", 
                    parse_mode="Markdown",
                    reply_markup=reply_markup)
    bot.send_message(message.chat.id, 
                    "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", 
                    reply_markup=markup)         
                    
@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä" and message.from_user.id == ADMIN_ID)
def delete_product_command(message):
    send_perfumes_to_delete(message.chat.id)

def send_perfumes_to_delete(chat_id):
    markup = types.InlineKeyboardMarkup()
    for perfume in perfumes:
        markup.add(types.InlineKeyboardButton(
            perfume['name'], 
            callback_data=f"delete_perfume_{perfume['id']}"
        ))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ñ—é–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_perfume_"))
def delete_perfume(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    perfume_id = int(call.data.split('_')[2])
    global perfumes
    perfumes = [p for p in perfumes if p['id'] != perfume_id]
    save_perfumes()
    bot.answer_callback_query(call.id, "‚úÖ –ü–∞—Ä—Ñ—é–º —É–¥–∞–ª–µ–Ω")
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "recommendations":
        show_recommendations(call)
    elif call.data == "make_order":
        send_perfumes(call.message)
    elif call.data == "retake_test":
        start_test(call.message.chat.id)
    elif call.data == "my_orders":
        show_orders(call.message)
    elif call.data == "cart":
        show_cart(call.message)
    elif call.data == "contacts":
        show_contacts(call.message)
    elif call.data == "faq":
        show_faq(call.message)
    elif call.data == "reviews":
        show_reviews(call.message)
    elif call.data.startswith("add_"):
        add_to_cart(call)
    bot.answer_callback_query(call.id)

def show_recommendations(call):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_data –≤–º–µ—Å—Ç–æ recommendations_storage
        recs = user_data[call.message.chat.id].get('recommendations', ["–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üò¢ –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞!"])
        bot.send_message(call.message.chat.id, 
                        "üå∏ *–¢–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n" + "\n".join(recs), 
                        parse_mode="Markdown")
    except Exception as e:
        print(f"Error showing recommendations: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

def send_perfumes(message):
    if not perfumes:
        bot.send_message(message.chat.id, "üõç –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ñ—é–º–æ–≤ –ø—É—Å—Ç.")
        return
    
    for perfume in perfumes:
        text = f"<b>{perfume['name']}</b>\n{perfume['description']}\n\nüíµ <i>–¶–µ–Ω–∞:</i>\n"
        text += "\n".join([f"{vol.replace('_', ' ')} - {1000 * (int(vol.split('_')[0]) // 50)} —Ä—É–±." for vol in volumes])
        
        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(
                text=f"{vol.replace('_', ' ')} ‚ûï",
                callback_data=f"add_{perfume['id']}_{vol}"
            ) for vol in volumes
        ]
        markup.add(*buttons)
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)
        
def add_to_cart(call):
    try:
        _, perfume_id, volume = call.data.split('_', 2)
        perfume_id = int(perfume_id)
        volume = volume.replace('_', ' ')

        perfume = next(p for p in perfumes if p['id'] == perfume_id)
        user = user_data[call.message.chat.id]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        initialize_user(call.message.chat.id)

        new_item = {
            "order_id": user['order_counter'],
            "name": perfume['name'],
            "volume": volume,
            "price": 1000 * (int(volume.split()[0]) // 50),
            "status": "–í –∫–æ—Ä–∑–∏–Ω–µ"
        }

        user['cart'].append(new_item)
        bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {perfume['name']} {volume}")
        save_data()

    except Exception as e:
        print(f"Error adding to cart: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

def show_cart(message):
    try:
        chat_id = message.chat.id
        items = user_data[chat_id].get('cart', [])
        
        if not items:
            bot.send_message(chat_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
        markup = types.InlineKeyboardMarkup()
        for index, item in enumerate(items):
            text += f"{index + 1}. {item['name']} ({item['volume']}) - {item['price']} —Ä—É–±.\n"
            markup.add(types.InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å {index + 1}", 
                callback_data=f"remove_from_cart_{index}"
            ))
        
        total = sum(item['price'] for item in items)
        text += f"\nüí∏ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
        markup.add(types.InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"))
        
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
        
    except Exception as e:
        print(f"Error showing cart: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_from_cart_"))
def remove_from_cart(call):
    chat_id = call.message.chat.id
    index = int(call.data.split('_')[-1])
    user = user_data[chat_id]
    if 0 <= index < len(user['cart']):
        removed_item = user['cart'].pop(index)
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed_item['name']}")
        bot.delete_message(chat_id, call.message.message_id)
        show_cart(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")     
        
@bot.callback_query_handler(func=lambda call: call.data == "confirm_order")
def confirm_order(call):
    try:
        chat_id = call.message.chat.id
        user = user_data[chat_id]
        
        if not user['cart']:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        order_id = user['order_counter']
        total = sum(item['price'] for item in user['cart'])
        
        user['orders'][order_id] = {
            "items": user['cart'].copy(),
            "status": "–°–æ–±–∏—Ä–∞–µ—Ç—Å—è",
            "total": total
        }
        user['order_counter'] += 1
        user['cart'] = []  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        bot.send_message(
            chat_id,
            f"üì¶ *–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
            f"üí∏ –û–ø–ª–∞—á–µ–Ω–æ {total} —Ä—É–±.\n"
            f"üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤—è—Ç –≥–æ–ª—É–±–∏–Ω–æ–π –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏\n\n"
            f"–°—Ç–∞—Ç—É—Å: –°–æ–±–∏—Ä–∞–µ—Ç—Å—è\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
            parse_mode="Markdown"
        )
        
        bot.delete_message(chat_id, call.message.message_id)
        show_orders(call.message)
        
    except Exception as e:
        print(f"Error confirming order: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")    
        
def show_orders(message):
    try:
        chat_id = message.chat.id
        orders = user_data[chat_id].get('orders', {})
        
        if not orders:
            bot.send_message(chat_id, "üì¶ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n" + "\n\n".join(
            [f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
             f"–ó–∞–∫–∞–∑ #{oid}\n"
             f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
             f"–°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
             f"–°–æ—Å—Ç–∞–≤: {', '.join([item['name'] for item in order['items']])}"
             for oid, order in orders.items()]
        )
        bot.send_message(chat_id, text, parse_mode="Markdown")
        
    except Exception as e:
        print(f"Error showing orders: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
        
def show_contacts(message):
    bot.send_message(message.chat.id, 
                    "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n"
                    "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
                    "Email: info@parfum-bot.com\n"
                    "–ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–æ–º–∞—Ç–Ω–∞—è, 15\n\n"
                    "‚è∞ –†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 10:00-20:00",
                    parse_mode="Markdown")

def show_faq(message):
    bot.send_message(message.chat.id,
                    "‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
                    "üí≥ *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?*\n"
                    "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n\n"
                    "üöö *–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏?*\n"
                    "1-3 –¥–Ω—è –ø–æ –ú–æ—Å–∫–≤–µ, 3-7 –¥–Ω–µ–π –ø–æ –†–æ—Å—Å–∏–∏\n\n"
                    "üîÑ *–í–æ–∑–≤—Ä–∞—Ç?*\n"
                    "–í–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
                    parse_mode="Markdown")

def show_reviews(message):
    bot.send_message(message.chat.id,
                    "‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n"
                    "¬´–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Å–µ—Ä–≤–∏—Å! –ê—Ä–æ–º–∞—Ç –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ—à–µ–ª¬ª - –ê–Ω–Ω–∞\n"
                    "¬´–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≤—Å–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω–æ¬ª - –î–º–∏—Ç—Ä–∏–π\n"
                    "¬´–õ—É—á—à–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏!¬ª - –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
                    parse_mode="Markdown")

@bot.message_handler(func=lambda m: True)
def handle_messages(message):
    chat_id = message.chat.id
    
    if user_data[chat_id].get('test_in_progress'):
        process_test_answer(message)
    elif message.text == "–ú–µ–Ω—é üì≤":
        show_main_menu(message)
    elif message.text in ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]:
        process_test_step(message)
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        add_product(message)
    else:
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá")

bot.polling(none_stop=True)
