import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID_ADMIN = os.getenv("CHAT_ID_ADMIN")

if not API_TOKEN or not CHAT_ID_ADMIN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(API_TOKEN)
user_data = {}  # {user_id: {data}}

questions = [
    "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –≤–∫—É—Å?",
    "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –∑–∞–ø–∞—Ö?",
    "–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ: —Ü–≤–µ—Ç–æ—á–Ω—ã–π, –¥—Ä–µ–≤–µ—Å–Ω—ã–π, —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–π, –ø—Ä—è–Ω—ã–π –∏–ª–∏ –¥—Ä—É–≥–æ–π?",
    "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ: —Ä–æ–∑—ã, –∂–∞—Å–º–∏–Ω, —Ñ–∏–∞–ª–∫–∞, –ª–∞–Ω–¥—ã—à –∏–ª–∏ –¥—Ä—É–≥–∏–µ?",
    "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ü–≤–µ—Ç–æ–∫ –±—ã–ª –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –Ω–æ—Ç–æ–π, –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–ª–∏ –±—ã —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏?",
    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –ª—ë–≥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –∞—Ä–æ–º–∞—Ç –∏–ª–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π?",
    "–ö–∞–∫–æ–π —Å–µ–∑–æ–Ω –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–∏–º –ª—é–±–∏–º—ã–º: –≤–µ—Å–Ω–∞, –ª–µ—Ç–æ, –æ—Å–µ–Ω—å –∏–ª–∏ –∑–∏–º–∞?",
    "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –≤–∞—à–µ–º—É –∞—Ä–æ–º–∞—Ç—É –¥—Ä–µ–≤–µ—Å–Ω—ã–µ –∏–ª–∏ –º—É—Å–∫—É—Å–Ω—ã–µ –Ω–æ—Ç—ã –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –≥–ª—É–±–∏–Ω—ã?",
    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –∞—Ä–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç—Å—è –≤–µ—Å—å –¥–µ–Ω—å, –∏–ª–∏ –ª—ë–≥–∫–∏–π —à–ª–µ–π—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç?",
    "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–ø—É—Å–∫–∞ –≤–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω: —Å–ø—Ä–µ–π, –¥—É—Ö–∏, –º–∞—Å–ª–æ –∏–ª–∏ —Ä–æ–ª–∏–∫–æ–≤—ã–π –ø–∞—Ä—Ñ—é–º?",
    "–ö–∞–∫ –Ω–∞—Å—á—ë—Ç —É–ø–∞–∫–æ–≤–∫–∏? –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–ª–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —è—Ä–∫–æ–µ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ?",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –µ—â—ë –Ω–µ –æ–±—Å—É–¥–∏–ª–∏?"
]

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_data[user_id] = {"progress": 0, "answers": {}}
    bot.reply_to(message, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—Ñ—é–º. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!")
    ask_name(message)

def ask_name(message):
    msg = bot.send_message(message.chat.id, "üìõ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    bot.register_next_step_handler(msg, process_name)

def process_name(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return reset_session(message)
    user_data[user_id]["name"] = message.text
    ask_phone_number(message)

def ask_phone_number(message):
    markup = types.ForceReply(selective=False)
    msg = bot.send_message(message.chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79123456789:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_phone_number)

def process_phone_number(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return reset_session(message)
    if not message.text.isdigit() or len(message.text) != 11:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä:")
        bot.register_next_step_handler(msg, process_phone_number)
        return
    user_data[user_id]["phone"] = message.text
    ask_email(message)

def ask_email(message):
    markup = types.ForceReply(selective=False)
    msg = bot.send_message(message.chat.id, "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_email)

def process_email(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return reset_session(message)
    if '@' not in message.text or '.' not in message.text.split('@')[-1]:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_email)
        return
    user_data[user_id]["email"] = message.text
    finish_registration(message)

# ========== –§–ò–ù–ò–® –ò –û–ü–†–û–° ==========
def finish_registration(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish'),
        types.InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')
    )
    bot.send_message(message.chat.id, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if call.data == 'finish':
        send_results_to_admin(user_id)
        bot.answer_callback_query(call.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    elif call.data == 'survey':
        user_data[user_id]["progress"] = 0
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        msg = bot.send_message(user_id, f"1/{len(questions)}: {questions[0]}")
        bot.register_next_step_handler(msg, process_answer)

def ask_question(user_id):
    if user_id not in user_data:
        return reset_session_by_user_id(user_id)
    
    progress = user_data[user_id].get("progress", 0)
    if progress >= len(questions):
        send_results_to_admin(user_id)
        return
    
    try:
        msg = bot.send_message(user_id, f"{progress+1}/{len(questions)}: {questions[progress]}")
        bot.register_next_step_handler(msg, process_answer)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        reset_session_by_user_id(user_id)

def process_answer(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return reset_session(message)
    
    progress = user_data[user_id]["progress"]
    user_data[user_id][f"q{progress+1}"] = message.text
    user_data[user_id]["progress"] += 1
    ask_question(user_id)

# ========== –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ==========
def send_results_to_admin(user_id):
    data = user_data.get(user_id, {})
    report = [
        "üî• –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!",
        f"üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        f"üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        "\nüìù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:"
    ]
    for i in range(len(questions)):
        answer = data.get(f"q{i+1}", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        report.append(f"{i+1}. {questions[i]}\n   ‚ûî {answer}")
    bot.send_message(CHAT_ID_ADMIN, "\n".join(report))
    cleanup_session(user_id)
    bot.send_message(user_id, "üåü –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# ========== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def reset_session(message):
    bot.send_message(message.chat.id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    cleanup_session(message.from_user.id)

def reset_session_by_user_id(user_id):
    bot.send_message(user_id, "‚ö† –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    cleanup_session(user_id)

def cleanup_session(user_id):
    if user_id in user_data:
        del user_data[user_id]

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
