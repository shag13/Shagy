from dotenv import load_dotenv
import os
import json
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import openpyxl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
load_dotenv()
# ID –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –ü—Ä–∏–º–µ—Ä ID –∞–¥–º–∏–Ω–∞
token = os.getenv('TOKEN_BARBER')
# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_database():
    try:
        with open('database.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"masters": {}}

def save_database(db):
    with open('database.json', 'w') as file:
        json.dump(db, file, indent=4)

def load_masters():
    try:
        with open('masters.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def load_services():
    try:
        with open('services.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_services(services):
    with open('services.json', 'w') as file:
        json.dump(services, file, indent=4)

def load_gallery():
    try:
        with open('gallery.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_gallery(gallery):
    with open('gallery.json', 'w') as file:
        json.dump(gallery, file, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open('users.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open('users.json', 'w') as file:
        json.dump(users, file, indent=4)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ users ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    if not isinstance(users, list):
        users = []

    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
    user_exists = False
    for i, u in enumerate(users):
        if isinstance(u, dict) and u.get("id") == user.id:
            users[i] = user_data  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_exists = True
            break
        elif u == user.id:  # –ï—Å–ª–∏ users ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ ID
            users[i] = user_data  # –ó–∞–º–µ–Ω—è–µ–º ID –Ω–∞ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
            user_exists = True
            break

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not user_exists:
        users.append(user_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    save_users(users)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book')],
        [InlineKeyboardButton("–ö–æ–≥–¥–∞ —Ç–∞–º?", callback_data='check_booking')],
        [InlineKeyboardButton("–ù–∞—à–∏ –ú–∞—Å—Ç–µ—Ä–∞", callback_data='our_masters')],
        [InlineKeyboardButton("–ì–∞–ª–µ—Ä–µ—è", callback_data='gallery')],
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='services_prices')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞!\n\n'
        '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n'
        '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É\n\n'
        '‚úÖ –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö\n\n'
        '‚úÖ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n'
        '‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –≥–∞–ª–µ—Ä–µ–µ\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. '
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n'
        '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòä',
        reply_markup=reply_markup
    )
    
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()

    # –°–æ–∑–¥–∞–µ–º Excel-—Ç–∞–±–ª–∏—Ü—É
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.append(["ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–ù–∏–∫–Ω–µ–π–º", "–¢–µ–ª–µ—Ñ–æ–Ω"])

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    for user_data in users:
        ws.append([
            user_data.get("id", ""),
            user_data.get("first_name", ""),
            user_data.get("last_name", ""),
            user_data.get("username", ""),
            user_data.get("phone", "")
        ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    excel_file = "users.xlsx"
    wb.save(excel_file)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω—É
    await context.bot.send_document(chat_id=ADMIN_ID, document=open(excel_file, 'rb'))

    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel-—Ç–∞–±–ª–∏—Ü—É.")

    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == 'menu':
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await query.delete_message()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book')],
            [InlineKeyboardButton("–ö–æ–≥–¥–∞ —Ç–∞–º?", callback_data='check_booking')],
            [InlineKeyboardButton("–ù–∞—à–∏ –ú–∞—Å—Ç–µ—Ä–∞", callback_data='our_masters')],
            [InlineKeyboardButton("–ì–∞–ª–µ—Ä–µ—è", callback_data='gallery')],
            [InlineKeyboardButton("–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='services_prices')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=reply_markup
        )
        return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...

    # –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã
    if query.data == 'services_prices':
        context.user_data['current_page'] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await show_services_page(query, context)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —É—Å–ª—É–≥
    elif query.data == 'next_services_page':
        context.user_data['current_page'] += 1
        await show_services_page(query, context)
        return
    elif query.data == 'prev_services_page':
        context.user_data['current_page'] -= 1
        await show_services_page(query, context)
        return

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
    elif query.data.startswith('service_info_'):
        service_name = query.data.split('_')[2]
        services = load_services()
        service_info = services[service_name]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
        message = f"üõé –£—Å–ª—É–≥–∞: {service_name}\n"
        message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service_info['description']}\n"
        message += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service_info['price']} —Ä—É–±."

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if service_info.get('image'):
            await query.message.reply_photo(
                photo=service_info['image'],
                caption=message
            )
        else:
            await query.message.reply_text(message)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data='services_prices')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text="–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=reply_markup)
        return

    # –ì–∞–ª–µ—Ä–µ—è
    if query.data == 'gallery':
        context.user_data['current_gallery_page'] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await show_gallery_page(query, context)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≥–∞–ª–µ—Ä–µ–∏
    elif query.data == 'next_gallery_page':
        context.user_data['current_gallery_page'] += 1
        await show_gallery_page(query, context)
        return
    elif query.data == 'prev_gallery_page':
        context.user_data['current_gallery_page'] -= 1
        await show_gallery_page(query, context)
        return

    # –ù–∞—à–∏ –ú–∞—Å—Ç–µ—Ä–∞
    if query.data == 'our_masters':
        masters = load_masters()
        message_text = "–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        for master, info in masters.items():
            message_text += f"üë§ {master}\n"
            message_text += f"{info['about']}\n\n"

        keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        return

    # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
    if query.data == 'book':
        keyboard = [
            [InlineKeyboardButton("–ò–≤–∞–Ω", callback_data='master_–ò–≤–∞–Ω')],
            [InlineKeyboardButton("–ï–≤–≥–µ–Ω–∏–π", callback_data='master_–ï–≤–≥–µ–Ω–∏–π')],
            [InlineKeyboardButton("–¢–∞—Ç—å—è–Ω–∞", callback_data='master_–¢–∞—Ç—å—è–Ω–∞')],
            [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
    elif query.data.startswith('master_'):
        master = query.data.split('_')[1]
        context.user_data['master'] = master

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ services.json
        services = load_services()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service_name in services.keys():
            keyboard.append([InlineKeyboardButton(service_name, callback_data=f'service_{service_name}')])

        keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    elif query.data.startswith('service_'):
        service_name = query.data.split('_')[1]
        context.user_data['service'] = service_name

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        services = load_services()
        service_info = services[service_name]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message = f"üõé –£—Å–ª—É–≥–∞: {service_name}\n"
        message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service_info['description']}\n"
        message += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service_info['price']} —Ä—É–±."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if service_info.get('image'):
            await query.message.reply_photo(
                photo=service_info['image'],
                caption=message
            )
        else:
            await query.message.reply_text(message)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        today = datetime.now().date()
        keyboard = []
        for i in range(7):
            date = today + timedelta(days=i)
            keyboard.append([InlineKeyboardButton(date.strftime("%d.%m.%Y"),
                          callback_data=f'date_{date.strftime("%Y-%m-%d")}')])

        keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    elif query.data.startswith('date_'):
        selected_date = query.data.split('_')[1]
        context.user_data['date'] = selected_date
        master = context.user_data['master']
        db = load_database()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        now = datetime.now()
        keyboard = []
        for hour in range(9, 21):
            time_slot = f"{hour:02d}:00"
            slot_datetime = datetime.strptime(f"{selected_date} {time_slot}", "%Y-%m-%d %H:%M")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            is_available = (
                slot_datetime > now and
                not db["masters"][master].get(selected_date, {}).get(time_slot)
            )
            if is_available:
                keyboard.append([InlineKeyboardButton(time_slot, callback_data=f'time_{time_slot}')])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='book')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    elif query.data.startswith('time_'):
        time = query.data.split('_')[1]
        master = context.user_data['master']
        service = context.user_data['service']
        date = context.user_data['date']
        user = update.effective_user
        db = load_database()
        if master in db["masters"] and date in db["masters"][master] and time in db["masters"][master][date]:
            await query.edit_message_text(text="–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        else:
            db["masters"][master].setdefault(date, {})[time] = {
                "user_id": user.id,
                "username": user.username,
                "service": service  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
            }
            save_database(db)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            appointment_time = datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
            context.job_queue.run_once(
                notify_user,
                appointment_time - timedelta(hours=1),
                chat_id=user.id,
                data={"master": master, "time": appointment_time}
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:\n"
                f"üë§ –ò–º—è: {user.first_name}\n"
                f"üÜî ID: {user.id}\n"
                f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}"
            )
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message
            )

            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=f"{user.first_name}, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É {master} –Ω–∞ {time} {date}.",
                reply_markup=reply_markup
            )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
    elif query.data == 'check_booking':
        user = update.effective_user
        db = load_database()
        booking_found = False

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for master, dates in db["masters"].items():
            for date, times in dates.items():
                for time, details in times.items():
                    if details["user_id"] == user.id:
                        context.user_data['current_booking'] = {
                            'master': master,
                            'date': date,
                            'time': time
                        }

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        keyboard = [
                            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel_booking')],
                            [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {time} {date} —É –º–∞—Å—Ç–µ—Ä–∞ {master}",
                            reply_markup=reply_markup
                        )
                        booking_found = True
                        return

        if not booking_found:
            keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=reply_markup)
        return

    # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    elif query.data == 'cancel_booking':
        booking = context.user_data.get('current_booking')
        if booking:
            db = load_database()
            try:
                del db["masters"][booking['master']][booking['date']][booking['time']]
                # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
                if not db["masters"][booking['master']][booking['date']]:
                    del db["masters"][booking['master']][booking['date']]
                save_database(db)

                keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text="–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=reply_markup)
            except KeyError:
                keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text="–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=reply_markup)
        else:
            keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=reply_markup)
        return

async def notify_user(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ —á–∞—Å –≤–∞—à —Å–µ–∞–Ω—Å —É –º–∞—Å—Ç–µ—Ä–∞ {job.data['master']}!"
    )

async def show_services_page(query, context):
    services = load_services()
    services_list = list(services.keys())
    current_page = context.user_data.get('current_page', 0)
    items_per_page = 5

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = current_page * items_per_page
    end_index = start_index + items_per_page
    current_services = services_list[start_index:end_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:\n\n"
    for service_name in current_services:
        message += f"üõé {service_name}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å–ª—É–≥
    keyboard = []
    for service_name in current_services:
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f'service_info_{service_name}')])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_services_page'))
    if end_index < len(services_list):
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_services_page'))
    if pagination_buttons:
        keyboard.append(pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_gallery_page(query, context):
    gallery = load_gallery()
    gallery_items = list(gallery.items())
    current_page = context.user_data.get('current_gallery_page', 0)
    items_per_page = 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ
    if not gallery_items:
        await query.edit_message_text(text="–ì–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    current_item = gallery_items[current_page]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"–ì–∞–ª–µ—Ä–µ—è:\n\nüñº {current_item[0]}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_gallery_page'))
    if current_page < len(gallery_items) - 1:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_gallery_page'))
    if pagination_buttons:
        keyboard.append(pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_photo(photo=current_item[1], caption=message, reply_markup=reply_markup)
    await query.delete_message()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    
async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data['photo_id'] = update.message.photo[-1].file_id
        await update.message.reply_text("–ö—É–¥–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ '—É—Å–ª—É–≥–∞' –∏–ª–∏ '–≥–∞–ª–µ—Ä–µ—è'.")
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ (—É—Å–ª—É–≥–∞ –∏–ª–∏ –≥–∞–ª–µ—Ä–µ—è)
    if 'admin_action' not in context.user_data:
        text = update.message.text.lower()
        if text == '—É—Å–ª—É–≥–∞':
            context.user_data['admin_action'] = 'service'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
        elif text == '–≥–∞–ª–µ—Ä–µ—è':
            context.user_data['admin_action'] = 'gallery'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '—É—Å–ª—É–≥–∞' –∏–ª–∏ '–≥–∞–ª–µ—Ä–µ—è'.")
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if 'admin_action' in context.user_data:
        if context.user_data['admin_action'] == 'service':
            service_name = update.message.text
            services = load_services()
            if service_name in services:
                services[service_name]['image'] = context.user_data['photo_id']
                save_services(services)
                await update.message.reply_text(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —É—Å–ª—É–≥–µ '{service_name}'.")
            else:
                await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            context.user_data.clear()

        elif context.user_data['admin_action'] == 'gallery':
            photo_name = update.message.text
            gallery = load_gallery()
            gallery[photo_name] = context.user_data['photo_id']
            save_gallery(gallery)
            await update.message.reply_text(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ '{photo_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞–ª–µ—Ä–µ—é.")
            context.user_data.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /say
async def say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return

    message = " ".join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    users = load_users()

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def main():
    application = Application.builder().token("token").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ex", export_to_excel))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ex
    application.add_handler(CommandHandler("say", say))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /say
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_admin_message))

    application.run_polling()

if __name__ == '__main__':
    main()
