from dotenv import load_dotenv
import telebot
import json
import os

load_dotenv()
# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TOKEN_SHOP'))
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'shop.json'
EXPECTED_CATEGORIES = ["–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–§–∏–Ω–∞–Ω—Å—ã", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ö–æ–Ω—Ç–µ–Ω—Ç", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–ó–¥–æ—Ä–æ–≤—å–µ", "–§—Ä–∏–ª–∞–Ω—Å", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category in list(data.keys()):
                if category not in EXPECTED_CATEGORIES:
                    del data[category]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for cat in EXPECTED_CATEGORIES:
                if cat not in data:
                    data[cat] = []
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if not isinstance(data[cat], list):
                    data[cat] = []
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                valid_bots = []
                for bot_data in data[cat]:
                    if isinstance(bot_data, dict):
                        bot_data.setdefault('username', 'unknown')
                        bot_data.setdefault('description', '')
                        bot_data.setdefault('link', '')
                        bot_data.setdefault('rating', 0)
                        bot_data.setdefault('votes', 0)
                        valid_bots.append(bot_data)
                data[cat] = valid_bots
            return data
        except (json.JSONDecodeError, IOError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {cat: [] for cat in EXPECTED_CATEGORIES}

data = load_data()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_seller = telebot.types.KeyboardButton('üë®‚Äçüíº –Ø –ø—Ä–æ–¥–∞–≤–µ—Ü')
    btn_buyer = telebot.types.KeyboardButton('üë©‚Äçüíº –Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å')
    markup.add(btn_seller, btn_buyer)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü"
@bot.message_handler(func=lambda message: message.text == 'üë®‚Äçüíº –Ø –ø—Ä–æ–¥–∞–≤–µ—Ü')
def seller(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_entertainment = telebot.types.KeyboardButton('üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
    btn_finance = telebot.types.KeyboardButton('üí∞ –§–∏–Ω–∞–Ω—Å—ã')
    btn_self_improvement = telebot.types.KeyboardButton('üìö –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ')
    btn_content = telebot.types.KeyboardButton('üì∑ –ö–æ–Ω—Ç–µ–Ω—Ç')
    btn_automation = telebot.types.KeyboardButton('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')
    btn_health = telebot.types.KeyboardButton('üè• –ó–¥–æ—Ä–æ–≤—å–µ')
    btn_freelance = telebot.types.KeyboardButton('üíº –§—Ä–∏–ª–∞–Ω—Å')
    btn_universal = telebot.types.KeyboardButton('üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π')
    btn_delete = telebot.types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞')
    btn_menu = telebot.types.KeyboardButton('–í –º–µ–Ω—é')
    markup.add(btn_entertainment, btn_finance, btn_self_improvement, btn_content, btn_automation, btn_health, btn_freelance, btn_universal, btn_delete, btn_menu)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–æ—Ç–∞:\n\n"
                                     "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - –±–æ—Ç—ã –¥–ª—è –∏–≥—Ä, –º–µ–º–æ–≤ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏–≥—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –º–µ–º–æ–≤. –ë–æ—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π.\n"
                                     "üí∞ –§–∏–Ω–∞–Ω—Å—ã - –±–æ—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –∏ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∑–∞–∫–∞–∑ –µ–¥—ã. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏. –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.\n"
                                     "üìö –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ - –±–æ—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤, –∫—É—Ä—Å—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏. \n"
                                     "üì∑ –ö–æ–Ω—Ç–µ–Ω—Ç - –±–æ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ë–æ—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è, –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–µ–π. –ë–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞. –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–æ—Ç—ã.\n"
                                     "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è - –±–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.\n"
                                     "üè• –ó–¥–æ—Ä–æ–≤—å–µ - –±–æ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
                                     "üíº –§—Ä–∏–ª–∞–Ω—Å - –±–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ë–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö\n"
                                     "üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π - –±–æ—Ç—ã —Å —à–∏—Ä–æ–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã. –ë–æ—Ç—ã-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã.\n\n", reply_markup=markup)
    bot.register_next_step_handler(message, choose_category)

def choose_category(message):
    if message.text == '–í –º–µ–Ω—é':
        start(message)
        return
    elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞':
        delete_bot(message)
        return
    category = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    if category not in data:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏):")
    bot.register_next_step_handler(message, get_description, category)

def get_description(message, category):
    if message.text == '–í –º–µ–Ω—é':
        start(message)
        return
    description = message.text
    if len(description) > 100:
        bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        bot.register_next_step_handler(message, get_description, category)
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:")
    bot.register_next_step_handler(message, get_link, category, description)

def get_link(message, category, description):
    if message.text == '–í –º–µ–Ω—é':
        start(message)
        return
    link = message.text
    username = message.from_user.username
    data[category].append({"username": username, "description": description, "link": link, "rating": 0, "votes": 0})
    save_data()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. üéâ")
    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
@bot.message_handler(func=lambda message: message.text == 'üë©‚Äçüíº –Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å')
def buyer(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_entertainment = telebot.types.KeyboardButton('üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
    btn_finance = telebot.types.KeyboardButton('üí∞ –§–∏–Ω–∞–Ω—Å—ã')
    btn_self_improvement = telebot.types.KeyboardButton('üìö –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ')
    btn_content = telebot.types.KeyboardButton('üì∑ –ö–æ–Ω—Ç–µ–Ω—Ç')
    btn_automation = telebot.types.KeyboardButton('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')
    btn_health = telebot.types.KeyboardButton('üè• –ó–¥–æ—Ä–æ–≤—å–µ')
    btn_freelance = telebot.types.KeyboardButton('üíº –§—Ä–∏–ª–∞–Ω—Å')
    btn_universal = telebot.types.KeyboardButton('üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π')
    btn_search = telebot.types.KeyboardButton('üîç –ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤')
    btn_menu = telebot.types.KeyboardButton('–í –º–µ–Ω—é')
    markup.add(btn_entertainment, btn_finance, btn_self_improvement, btn_content, btn_automation, btn_health, btn_freelance, btn_universal, btn_search, btn_menu)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–æ—Ç–∞:\n\n"
                                     "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - –±–æ—Ç—ã –¥–ª—è –∏–≥—Ä, –º–µ–º–æ–≤ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏–≥—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –º–µ–º–æ–≤. –ë–æ—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π.\n"
                                     "üí∞ –§–∏–Ω–∞–Ω—Å—ã - –±–æ—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –∏ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∑–∞–∫–∞–∑ –µ–¥—ã. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏. –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.\n"
                                     "üìö –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ - –±–æ—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤, –∫—É—Ä—Å—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏. \n"
                                     "üì∑ –ö–æ–Ω—Ç–µ–Ω—Ç - –±–æ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ë–æ—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è, –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–µ–π. –ë–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞. –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–æ—Ç—ã.\n"
                                     "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è - –±–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.\n"
                                     "üè• –ó–¥–æ—Ä–æ–≤—å–µ - –±–æ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
                                     "üíº –§—Ä–∏–ª–∞–Ω—Å - –±–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ë–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö\n"
                                     "üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π - –±–æ—Ç—ã —Å —à–∏—Ä–æ–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã. –ë–æ—Ç—ã-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã.\n\n"
                                     "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è üîç –ü–æ–∏—Å–∫–æ–º –±–æ—Ç–æ–≤.", reply_markup=markup)
    bot.register_next_step_handler(message, buyer_action)

def buyer_action(message):
    if message.text == '–í –º–µ–Ω—é':
        start(message)
        return
    elif message.text == 'üîç –ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, search_bots)
    else:
        show_bots(message)

def show_bots(message):
    category = message.text[2:]
    if category not in data:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    bots = data.get(category, [])
    if not isinstance(bots, list):
        bots = []
    if not bots:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤. üòî")
        return
    sorted_bots = sorted(bots, key=lambda x: x['rating'], reverse=True)
    bot_list = "\n\n".join([f"üë§ {b['username']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {b['description']}\n–†–µ–π—Ç–∏–Ω–≥: {b['rating']} ({b['votes']} –≥–æ–ª–æ—Å–æ–≤)\n–°—Å—ã–ª–∫–∞: {b['link']}" for b in sorted_bots])
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_rate = telebot.types.KeyboardButton('‚≠ê –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞')
    btn_menu = telebot.types.KeyboardButton('–í –º–µ–Ω—é')
    markup.add(btn_rate, btn_menu)
    bot.send_message(message.chat.id, f"–ë–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n{bot_list}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_category_actions, category)

def handle_category_actions(message, category):
    if message.text == '–í –º–µ–Ω—é':
        start(message)
        return
    elif message.text == '‚≠ê –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞':
        rate_bot(message)
    else:
        show_bots(message)

# –ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def search_bots(message):
    keyword = message.text.lower()
    found_bots = []
    for category, bots in data.items():
        for bot_data in bots:
            if keyword in bot_data['description'].lower():
                found_bots.append((category, bot_data))
    if not found_bots:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî")
        start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
    bot_list = "\n".join([f"üë§ {bot_data['username']}: {bot_data['description']}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {bot_data['rating']}\nüîó {bot_data['link']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" for category, bot_data in found_bots])
    bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}':\n\n{bot_list}")
    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤
def delete_bot(message):
    username = message.from_user.username
    user_bots = []
    for category, bots in data.items():
        for bot_data in bots:
            if bot_data['username'] == username:
                user_bots.append((category, bot_data))
    if not user_bots:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤. üòî")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot_list = "\n".join([f"{i+1}. {bot_data['description']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})" for i, (category, bot_data) in enumerate(user_bots)])
    bot.send_message(message.chat.id, f"–í–∞—à–∏ –±–æ—Ç—ã:\n\n{bot_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, confirm_delete, user_bots)

def confirm_delete(message, user_bots):
    try:
        index = int(message.text) - 1
        if index < 0 or index >= len(user_bots):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        category, bot_data = user_bots[index]
        data[category].remove(bot_data)
        save_data()
        bot.send_message(message.chat.id, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. üóë")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞.")
    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –û—Ü–µ–Ω–∫–∞ –±–æ—Ç–æ–≤
def rate_bot(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞:")
    bot.register_next_step_handler(message, process_link_for_rating)

def process_link_for_rating(message):
    link = message.text.strip()
    found = None
    for cat in EXPECTED_CATEGORIES:
        for bot_data in data.get(cat, []):
            if bot_data.get('link') == link:
                found = bot_data
                break
        if found:
            break
    if not found:
        bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5:")
    bot.register_next_step_handler(message, process_rating, found)

def process_rating(message, bot_data):
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            bot_data['votes'] += 1
            bot_data['rating'] = (bot_data['rating'] * (bot_data['votes'] - 1) + rating) / bot_data['votes']
            save_data()
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /st –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['st'])
def stats(message):
    if message.from_user.id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total = sum(len(bots) for bots in data.values())
        bot.send_message(message.chat.id, f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {total}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
