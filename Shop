from dotenv import load_dotenv
import os
import json
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

load_dotenv()

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

DATA_FILE = 'shop.json'
EXPECTED_CATEGORIES = ["–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–§–∏–Ω–∞–Ω—Å—ã", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ö–æ–Ω—Ç–µ–Ω—Ç",
                      "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–ó–¥–æ—Ä–æ–≤—å–µ", "–§—Ä–∏–ª–∞–Ω—Å", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"]
ITEMS_PER_PAGE = 1

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    role = State()
    add_description = State()
    add_link = State()
    search = State()
    delete = State()
    rate_bot = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
class BotData:
    def __init__(self, username, description, link, rating=0, votes=0, rated_by=None):
        self.username = username
        self.description = description
        self.link = link
        self.rating = rating
        self.votes = votes
        self.rated_by = rated_by if rated_by is not None else []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                raw_data = json.load(f)
                data_dict = {}
                for cat, bots in raw_data.items():
                    bot_list = []
                    for bot in bots:
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        bot_data = {
                            'username': bot.get('username', ''),
                            'description': bot.get('description', ''),
                            'link': bot.get('link', ''),
                            'rating': bot.get('rating', 0),
                            'votes': bot.get('votes', 0),
                            'rated_by': bot.get('rated_by', [])  # –î–æ–±–∞–≤–ª—è–µ–º rated_by
                        }
                        bot_list.append(BotData(**bot_data))
                    data_dict[cat] = bot_list
                return data_dict
        except Exception as e:
            print(f"Error loading data: {e}")
            return {cat: [] for cat in EXPECTED_CATEGORIES}
    return {cat: [] for cat in EXPECTED_CATEGORIES}

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        serializable = {
            cat: [
                {
                    'username': bot.username,
                    'description': bot.description,
                    'link': bot.link,
                    'rating': bot.rating,
                    'votes': bot.votes,
                    'rated_by': bot.rated_by  # –°–æ—Ö—Ä–∞–Ω—è–µ–º rated_by
                }
                for bot in bots
            ]
            for cat, bots in data.items()
        }
        json.dump(serializable, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
data = load_data()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_kb():
    total_bots = sum(len(bots) for bots in data.values())
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=f"üë®üíº –ü—Ä–æ–¥–∞–≤–µ—Ü",
            callback_data="role_seller"),
        InlineKeyboardButton(
            text=f"üë©üíº –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ({total_bots} –±–æ—Ç–æ–≤)", 
            callback_data="role_buyer")
    )
    return builder.as_markup()

def categories_kb(role: str):
    total_bots = sum(len(bots) for bots in data.values())
    builder = InlineKeyboardBuilder()
    for cat in EXPECTED_CATEGORIES:
        builder.add(InlineKeyboardButton(
            text=f"{cat}",
            callback_data=f"category_{role}_{cat}"))
    if role == 'seller':
        builder.row(InlineKeyboardButton(
            text="üóë –ú–æ–∏ –±–æ—Ç—ã", 
            callback_data="my_bots"))
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
    )
    return builder.adjust(2).as_markup()

# –•—ç–Ω–¥–ª–µ—Ä—ã
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    total = sum(len(bots) for bots in data.values())
    await message.answer(
        f"<b>ü§ñ –ë–∏—Ä–∂–∞ Telegram –±–æ—Ç–æ–≤</b>\n\n"
        f"<i>üîÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–≤: {total}</i>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    total = sum(len(bots) for bots in data.values())
    await callback.message.edit_text(
        f"<b>ü§ñ –ë–∏—Ä–∂–∞ Telegram –±–æ—Ç–æ–≤</b>\n\n"
        f"<i>üîÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–≤: {total}</i>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data.startswith("role_"))
async def role_handler(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    await state.update_data(role=role)
    total = sum(len(bots) for bots in data.values())
    
    text = (
        f"üéõ <b>–ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞</b> (–≤—Å–µ–≥–æ –±–æ—Ç–æ–≤: {total})\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞:" 
        if role == "seller" 
        else f"üõç <b>–ö–∞—Ç–∞–ª–æ–≥ –±–æ—Ç–æ–≤</b> (–≤—Å–µ–≥–æ: {total})\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=categories_kb(role)
    )

@router.message(Command('cancel'))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await cmd_start(message, state)

@router.message(Form.add_description)
async def add_description_handler(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await cmd_start(message, state)
        return
    
    if len(message.text) > 100:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=message.text)
    await message.answer(
        "üìé –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª):\n\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
    )
    await state.set_state(Form.add_link)

@router.message(Form.add_link)
async def add_link_handler(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await cmd_start(message, state)
        return
    
    await state.update_data(link=message.text)
    user_data = await state.get_data()
    category = user_data['category']
    
    new_bot = BotData(
        username=message.from_user.username,
        description=user_data['description'],
        link=message.text
    )
    
    data[category].append(new_bot)
    save_data(data)
    
    await message.answer("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await cmd_start(message, state)

ITEMS_PER_PAGE = 3  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 3 –ª–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ------------------------

async def show_bot_page(message: Message, category: str, page: int, role: str):
    bots = data[category]
    total_pages = (len(bots) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    page = max(0, min(page, total_pages - 1))
    
    if not bots:
        await message.answer("üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ")
        return
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_bots = bots[start_idx:end_idx]
    
    text = f"<b>{category}</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"
    for i, bot in enumerate(page_bots, start=1):
        text += (
            f"üìù <b>–õ–æ—Ç {start_idx + i}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {bot.description}\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {bot.link}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: @{bot.username}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {bot.rating} ({bot.votes} –æ—Ü–µ–Ω–æ–∫)\n\n"
        )
    
    builder = InlineKeyboardBuilder()
    for i, bot in enumerate(page_bots, start=1):
        builder.row(InlineKeyboardButton(
            text=f"‚≠ê –û—Ü–µ–Ω–∏—Ç—å –ª–æ—Ç ‚Ññ{start_idx + i}",
            callback_data=f"choose_rate:{category}:{start_idx + i - 1}"
        ))
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"nav_prev_{category}_{page}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"nav_next_{category}_{page}"),
    )
    builder.row(InlineKeyboardButton(
        text="üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 
        callback_data=f"role_{role}"
    ))
    
    if message.text:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=builder.as_markup())
    else:  # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        await message.edit_text(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("nav_"))
async def nav_handler(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    action = data_parts[1]
    category = data_parts[2]
    current_page = int(data_parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    role = user_data.get('role', 'buyer')
    
    bots = data[category]
    ITEMS_PER_PAGE = 3
    total_pages = (len(bots) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    new_page = current_page - 1 if action == "prev" else current_page + 1
    new_page = max(0, min(new_page, total_pages-1))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=new_page, current_category=category)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if new_page != current_page:
        await show_bot_page(callback.message, category, new_page, role)
    await callback.answer()

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@router.callback_query(F.data.startswith("category_"))
async def category_handler(callback: CallbackQuery, state: FSMContext):
    _, role, category = callback.data.split("_", 2)
    bots = data[category]
    
    if role == 'seller':
        await state.set_state(Form.add_description)
        await state.update_data(category=category)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    else:
        if not bots:
            await callback.answer("üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ", show_alert=True)
            return
        await show_bot_page(callback.message, category, 0, role)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def bot_card_kb(bot_data: BotData, page: int, category: str, role: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=f"‚≠ê {bot_data.rating} ({bot_data.votes})",
        callback_data=f"choose_rate_{bot_data.link}"))  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"nav_prev_{category}_{page}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"nav_next_{category}_{page}"),
    )
    builder.row(InlineKeyboardButton(
        text="üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 
        callback_data=f"role_{role}"))
    return builder.as_markup()

@router.callback_query(F.data.startswith("choose_rate:"))
async def choose_rate_handler(callback: CallbackQuery, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    _, category, bot_index = callback.data.split(":", 2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    bot_index = int(bot_index)  # –ò–Ω–¥–µ–∫—Å –ª–æ—Ç–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    bot = data[category][bot_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    user_id = callback.from_user.id
    if hasattr(bot, 'rated_by') and user_id in bot.rated_by:
        await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    await state.update_data(
        rate_bot_category=category,
        rate_bot_index=bot_index,
        original_message_id=callback.message.message_id
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.add(InlineKeyboardButton(text=str(i), callback_data=f"set_rate:{i}"))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ
    builder.adjust(5)
    
    await callback.message.answer(
        "üåü –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.rate_bot)
    
@router.callback_query(Form.rate_bot, F.data.startswith("set_rate:"))
async def set_rate_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    rate = int(callback.data.split(":", 1)[1])  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
    user_data = await state.get_data()
    category = user_data['rate_bot_category']
    bot_index = user_data['rate_bot_index']
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    bot_data = data[category][bot_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    if hasattr(bot_data, 'rated_by') and user_id in bot_data.rated_by:
        await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!", show_alert=True)
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    if not hasattr(bot_data, 'rated_by'):
        bot_data.rated_by = []
    bot_data.rated_by.append(user_id)
    bot_data.votes += 1
    bot_data.rating = round((bot_data.rating * (bot_data.votes - 1) + rate) / bot_data.votes, 1)
    save_data(data)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ü–µ–Ω–∫–∏
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    original_message_id = user_data['original_message_id']
    try:
        await bot.delete_message(callback.message.chat.id, original_message_id)
    except:
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ—Ç–∞–º–∏
    await callback.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rate}!", show_alert=True)
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤
    await show_bot_page(
        callback.message, 
        category, 
        user_data.get('current_page', 0), 
        user_data.get('role', 'buyer')
    )
    
@router.callback_query(F.data.startswith("rate_"))
async def rate_handler(callback: CallbackQuery):
    link = callback.data.split("_", 1)[1]
    for cat in data.values():
        for bot in cat:
            if bot.link == link:
                bot.votes += 1
                bot.rating = round((bot.rating * (bot.votes - 1) + 5) / bot.votes, 1)
                save_data(data)
                await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
                return
    await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data == "my_bots")
async def my_bots_handler(callback: CallbackQuery):
    user_bots = []
    for cat in data.values():
        for bot in cat:
            if bot.username == callback.from_user.username:
                user_bots.append(bot)
    
    if not user_bots:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    for bot in user_bots:
        builder.row(InlineKeyboardButton(
            text=f"‚ùå {bot.description[:20]}",
            callback_data=f"delete_{user_bots.index(bot)}"))  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="role_seller"))
    
    await callback.message.edit_text(
        "üóë –í–∞—à–∏ –±–æ—Ç—ã:\n" + "\n".join([f"‚Ä¢ {bot.description}" for bot in user_bots]),
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("delete_"))
async def delete_handler(callback: CallbackQuery):
    bot_index = int(callback.data.split("_", 1)[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ª–æ—Ç–∞
    user_bots = []
    for cat in data.values():
        for bot in cat:
            if bot.username == callback.from_user.username:
                user_bots.append(bot)
    
    if bot_index < len(user_bots):
        bot_to_delete = user_bots[bot_index]
        for cat in data.values():
            if bot_to_delete in cat:
                cat.remove(bot_to_delete)
                save_data(data)
                await callback.answer("‚úÖ –ë–æ—Ç —É–¥–∞–ª–µ–Ω")
                await my_bots_handler(callback)
                return
    await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data == "search")
async def search_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(Form.search)

@router.message(Form.search)
async def process_search(message: Message, state: FSMContext):
    query = message.text.lower()
    results = []
    
    for cat_name, bots in data.items():
        for bot in bots:
            if (query in bot.description.lower()) or (query in bot.link.lower()):
                results.append((cat_name, bot))
    
    await state.clear()
    
    if not results:
        await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(search_results=results)
    
    builder = InlineKeyboardBuilder()
    for idx, (cat, bot) in enumerate(results):
        btn_text = f"{cat}: {bot.description[:20]}" if bot.description else f"{cat}: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        builder.row(InlineKeyboardButton(
            text=btn_text,
            callback_data=f"show_search_result:{idx}"  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ))
    
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="role_buyer"))
    
    await message.answer(
        f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("show_search_result:"))
async def show_search_result(callback: CallbackQuery, state: FSMContext):
    result_index = int(callback.data.split(":", 1)[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    results = user_data.get("search_results", [])
    
    if result_index < len(results):
        cat, bot = results[result_index]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–æ—Ç
        bots_in_category = data[cat]
        page = bots_in_category.index(bot) // ITEMS_PER_PAGE
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_category=cat,
            current_page=page,
            role="buyer"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ª–æ—Ç–æ–º
        await show_bot_page(callback.message, cat, page, "buyer")
    else:
        await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def main():
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
