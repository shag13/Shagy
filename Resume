from dotenv import load_dotenv
import telebot
from telebot import types
import time
import json
import os
import sqlite3
import schedule
from threading import Thread
from datetime import datetime, timedelta

load_dotenv()
# Замените 'YOUR_BOT_TOKEN' на токен вашего бота
bot = telebot.TeleBot(os.getenv('TOKEN_RESUME'))
ADMIN_ID = os.getenv("ADMIN_ID")

# Подключение к базе данных SQLite
conn = sqlite3.connect('reminders.db', check_same_thread=False)
cursor = conn.cursor()

RESUME_KEYBOARD = types.ReplyKeyboardMarkup(resize_keyboard=True)
RESUME_KEYBOARD.add(types.KeyboardButton('Назад'), types.KeyboardButton('Отменить опросник'))

# Создание таблицы для хранения напоминаний
cursor.execute('''
CREATE TABLE IF NOT EXISTS reminders (
    chat_id INTEGER PRIMARY KEY,
    reminder_time TEXT
)
''')
conn.commit()

# Функция для проверки и отправки напоминаний
def check_reminders():
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('SELECT chat_id FROM reminders WHERE reminder_time <= ?', (now,))
    for chat_id in cursor.fetchall():
        bot.send_message(chat_id[0], "Напоминаю пройти анкету")
        cursor.execute('DELETE FROM reminders WHERE chat_id = ?', (chat_id[0],))
    conn.commit()

# Запуск проверки напоминаний в отдельном потоке
def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)

# Планирование проверки каждую минуту
schedule.every().minute.do(check_reminders)
Thread(target=schedule_checker).start()

# Файл для сохранения данных
DATA_FILE = 'user_results.json'

# Словари для хранения данных
user_data = {}  # Текущие сессии пользователей
user_results = {}  # История всех результатов
user_responses = {}
feedback_steps = {}

# Загрузка данных из файла (если он существует)
def load_data():
    global user_results
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            user_results = json.load(file)
    except FileNotFoundError:
        user_results = {}

# Сохранение данных в файл
def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(user_results, file, ensure_ascii=False, indent=4)

questions3 = [
    {
        "text": "1. Как обычно проходит ваше утро?",
        "options": [
            "А) Я просыпаюсь с ясным планом на день, заряженный энергией и позитивным настроем. Утро для меня — это время, чтобы настроиться на продуктивность и начать день с маленьких, но важных ритуалов.",
            "Б) Чаще всего мое утро проходит в спешке: я встаю в последний момент, быстро собираюсь и бегу по делам. У меня нет четкого ритуала, и каждый день начинается по-разному.",
            "В) Мое утро — это медленное пробуждение: я долго лежу в кровати, листаю соцсети, пью кофе и откладываю начало дня. Иногда мне сложно собраться с мыслями и взяться за дела.",
            "Г) Мое утро зависит от дня: иногда я полон энергии и готов действовать, а иногда позволяю себе расслабиться и никуда не торопиться. Гибкость — мой главный принцип."
        ]
    },
    {
        "text": "2. Как часто вы ловите себя на том, что бесцельно листаете ленту соцсетей, и сколько времени это обычно занимает?",
        "options": [
            "А) Я стараюсь минимизировать такое время: трачу меньше 30 минут в день и обычно только для короткого отдыха или проверки важных уведомлений.",
            "Б) Иногда я замечаю, что провожу в соцсетях 1–2 часа, особенно когда устаю или хочу отвлечься. Это уже стало привычкой, но я стараюсь контролировать.",
            "В) К сожалению, я часто теряю счет времени и могу провести 3 часа или больше, листая ленту. Иногда это помогает расслабиться, но чаще оставляет чувство пустой траты времени.",
            "Г) Я вообще не слежу за этим. Соцсети — это часть моей жизни, и я не задумываюсь, сколько времени на них трачу."
        ]
    },
    {
        "text": "3. Как часто вы находите время для физической активности или занятий спортом?",
        "options": [
            "А) Я стараюсь поддерживать активный образ жизни и занимаюсь спортом 4–7 раз в неделю. Это важная часть моей рутины, которая помогает мне чувствовать себя бодрым и здоровым.",
            "Б) Я уделяю время физической активности 1–3 раза в неделю. Это не всегда регулярно, но я стараюсь не забывать о своем здоровье.",
            "В) К сожалению, я занимаюсь спортом реже раза в неделю. Иногда не хватает времени или мотивации, но я понимаю, что нужно это изменить.",
            "Г) Я вообще не занимаюсь спортом. Пока это не входит в мои привычки, и я не нахожу для этого времени или желания."
        ]
    },
    {
        "text": "4. Что обычно входит в ваш завтрак?",
        "options": [
            "А) Я стараюсь начинать день с полезных и сбалансированных блюд: каши, яйца, свежие фрукты, тосты из цельнозернового хлеба. Это помогает мне чувствовать себя энергичным и готовым к новому дню.",
            "Б) Чаще всего мой завтрак — это что-то быстрое и простое: йогурт, тост или бутерброд. У меня не всегда есть время на готовку, но я стараюсь не пропускать утренний прием пищи.",
            "В) К сожалению, я часто пропускаю завтрак. Иногда не успеваю позавтракаюсь, и это не лучшая привычка, но я знаю, что нужно изменить.",
            "Г) Я люблю начинать день с вредной еды: сладостей, фастфуда. Это не самое здоровое, но иногда хочется побаловать себя."
        ]
    },
    {
        "text": "5. Как вы справляетесь со стрессом?",
        "options": [
            "А) Я использую медитацию, дыхательные практики. Они помогают мне успокоиться и найти баланс.",
            "Б) Я предпочитаю поговорить с близкими или друзьями. Иногда просто нужно выговориться.",
            "В) К сожалению, я часто заедаю стресс сладостями или выпиваю. Это не лучший способ, но пока я не могу найти другой.",
            "Г) Я стараюсь игнорировать стресс, пока он не пройдет сам. Иногда это работает, но я понимаю, что нужно искать более здоровые методы."
        ]
    },
    {
        "text": "6. Как часто вы говорите своим близким, что цените их?",
        "options": [
            "А) Я стараюсь напоминать им об этом каждый день. Это важно для меня, чтобы они чувствовали мою любовь.",
            "Б) Раз в неделю. Я верю, что дела говорят сами за себя.",
            "В) К сожалению, я редко говорю об этом. Но я понимаю, что нужно чаще выражать чувства.",
            "Г) Я никогда не задумывался об этом."
        ]
    },
    {
        "text": "7. Кто из вашего окружения вас вдохновляет?",
        "options": [
            "А) Есть несколько людей, которые меня вдохновляют: друзья, коллеги, наставники. Их энергия, достижения и подход к жизни всегда заряжают.",
            "Б) Один человек. Его история, упорство и отношение к жизни всегда мотивируют.",
            "В) К сожалению, я не могу назвать никого. Возможно, я просто не задумывался об этом.",
            "Г) Я никогда не задумывался, кто меня вдохновляет. Может быть, стоит обратить внимание на таких людей."
        ]
    },
    {
        "text": "8. Какие моменты с близкими вам особенно дороги, и как вы обычно проводите время вместе?",
        "options": [
            "А) Мы любим активный отдых или совместные проекты: походы, спортивные игры, творческие занятия или волонтёрство. Это укрепляет наши отношения и даёт общие воспоминания.",
            "Б) Чаще всего мы расслабляемся вместе: смотрим фильмы, гуляем в парке или просто болтаем за чашкой чая. Для нас важно не действие, а возможность быть рядом.",
            "В) К сожалению, мы редко видимся из-за работы, расстояния или разных графиков. Стараемся ценить те редкие моменты, когда удаётся встретиться.",
            "Г) В основном общаемся онлайн: созвоны, переписки, совместные стримы. Так проще оставаться на связи в условиях цейтнота или расстояния."
        ]
    },
    {
        "text": "9. Что для вас важнее в отношениях?",
        "options": [
            "А) Глубокое взаимопонимание: возможность быть собой, делиться мыслями и чувствами без страха осуждения. Это основа доверия и близости.",
            "Б) Совместные цели и мечты: когда мы движемся в одном направлении, это делает нас сильнее.",
            "В) Стабильность: знать, что рядом есть человек, на которого можно положиться.",
            "Г) Свобода: возможность быть собой, не терять индивидуальность."
        ]
    },
    {
        "text": "10. Какие подходы вы используете для разрешения конфликтных ситуаций в личной или профессиональной жизни?",
        "options": [
            "А) Стараюсь найти компромисс, учитывая интересы всех сторон, и ищу взаимовыгодные решения.",
            "Б) Избегаю прямого противостояния, предпочитая уйти от спора, чтобы сохранить спокойствие.",
            "В) Активно отстаиваю свою точку зрения, используя аргументы и факты, чтобы доказать свою правоту.",
            "Г) Склонен перекладывать ответственность на других, чтобы избежать личной вовлечённости в конфликт."
        ]
    },
    {
        "text": "11. Как вы управляете своими финансами и планируете расходы?",
        "options": [
            "А) Ведёте детальный бюджет, инвестируете и стремитесь к долгосрочному финансовому росту.",
            "Б) Трачу деньги по мере их поступления, без чёткого плана или стратегии.",
            "В) Часто прибегаю к займам или кредитам, чтобы покрыть текущие расходы.",
            "Г) Не задумываюсь о финансовом планировании, живу сегодняшним днём."
        ]
    },
    {
        "text": "12. Как вы понимаете концепцию финансовой свободы?",
        "options": [
            "А) Это возможность жить на пассивный доход, не завися от ежемесячной зарплаты.",
            "Б) Это отсутствие долгов и финансовых обязательств, которые ограничивают мои действия.",
            "В) Это высокая зарплата или доход, позволяющий тратить без ограничений.",
            "Г) Пока не задумывался над этим вопросом, не имею чёткого представления."
        ]
    },
    {
        "text": "13. Как вы развиваете свои знания в области управления финансами?",
        "options": [
            "А) Регулярно изучаю книги, прохожу курсы и слежу за финансовыми новостями.",
            "Б) Иногда смотрю образовательные видео или читаю статьи, но без системного подхода.",
            "В) Обращаюсь к финансовой грамотности только в случае возникновения проблем.",
            "Г) Не занимаюсь изучением финансов, считаю это необязательным."
        ]
    },
    {
        "text": "14. Какую часть своего дохода вы регулярно откладываете или инвестируете?",
        "options": [
            "А) 20% и более, стремясь к созданию финансовой подушки и долгосрочным накоплениям.",
            "Б) Около 10%, стараясь сохранять баланс между текущими расходами и сбережениями.",
            "В) Меньше 10%, так как основная часть дохода уходит на текущие нужды.",
            "Г) Не откладываю ничего, так как доходы едва покрывают расходы."
        ]
    },
    {
        "text": "15. Какие шаги вы готовы предпринять для увеличения своего дохода?",
        "options": [
            "А) Освоить новую профессию или навыки, чтобы повысить свою ценность на рынке труда.",
            "Б) Сменить текущую работу на более высокооплачиваемую или перспективную.",
            "В) Взять подработку или временную работу для дополнительного заработка.",
            "Г) Ничего не планирую менять, так как текущий уровень дохода меня устраивает."
        ]
    },
    {
        "text": "16. Как вы следите за своим здоровьем и проводите профилактические мероприятия?",
        "options": [
            "А) Регулярно прохожу медицинские обследования (раз в год или чаще) для контроля состояния здоровья.",
            "Б) Обращаюсь к врачу только в случае появления симптомов или ухудшения самочувствия.",
            "В) Не помню, когда последний раз проверял здоровье, не считаю это приоритетом.",
            "Г) Не верю в профилактику и предпочитаю лечиться только при необходимости."
        ]
    },
    {
        "text": "17. Какой у вас режим сна, и как вы оцениваете его качество?",
        "options": [
            "А) Спите 7–8 часов ежедневно, что позволяет чувствовать себя отдохнувшим и полным энергии.",
            "Б) Спите 5–6 часов, что иногда сказывается на уровне энергии и продуктивности.",
            "В) Спите меньше 5 часов, что приводит к хронической усталости и снижению концентрации.",
            "Г) Сон нерегулярный, часто зависит от обстоятельств, что негативно влияет на самочувствие."
        ]
    },
    {
        "text": "18. Какие стратегии и практики вы используете для поддержания высокого уровня энергии и продуктивности в повседневной жизни?",
        "options": [
            "А) Регулярные физические нагрузки (спорт, тренировки), соблюдение режима дня (сон, питание), прием витаминов и добавок для поддержания здоровья.",
            "Б) Употребление стимуляторов, таких как кофе, энергетические напитки или другие средства для кратковременного повышения энергии.",
            "В) Не предпринимаю специальных действий для поддержания энергии, полагаюсь на естественные ресурсы организма.",
            "Г) Постоянно испытываю недостаток энергии, несмотря на попытки что-то изменить, и не знаю, как эффективно справляться с этим состоянием."
        ]
    },
    {
        "text": "19. Как часто вы испытываете чувство усталости, и насколько оно влияет на вашу повседневную жизнь?",
        "options": [
            "А) Практически никогда — я чувствую себя бодрым и полным сил большую часть времени.",
            "Б) К концу недели, особенно после интенсивной работы или учебы.",
            "В) Ежедневно, даже после отдыха или сна.",
            "Г) Постоянно, независимо от обстоятельств, и это значительно снижает качество жизни."
        ]
    },
    {
        "text": "20. Какие основные препятствия мешают вам вести здоровый образ жизни?",
        "options": [
            "А) Ничего — я уже активно веду здоровый образ жизни и придерживаюсь полезных привычек.",
            "Б) Нехватка времени из-за работы, учебы или других обязательств.",
            "В) Отсутствие мотивации или лень, которые мешают начать или поддерживать изменения.",
            "Г) Не вижу смысла в здоровом образе жизни или не верю в его эффективность."
        ]
    },
    {
        "text": "21. Насколько ваша текущая работа соответствует вашим долгосрочным целям и мечтам?",
        "options": [
            "А) Это важный шаг на пути к моей цели, я вижу прогресс и развитие.",
            "Б) Устраивает в целом, но есть аспекты, которые хотелось бы улучшить или изменить.",
            "В) Это просто способ заработать деньги, без связи с моими мечтами или увлечениями.",
            "Г) Я чувствую разочарование и неудовлетворенность, работа не приносит радости."
        ]
    },
    {
        "text": "22. Какие действия вы готовы предпринять для достижения карьерного роста и профессионального развития?",
        "options": [
            "А) Постоянно учиться, развивать навыки и уделять максимум времени самообразованию.",
            "Б) Рассматриваю смену компании или сферы деятельности для новых возможностей.",
            "В) Предпочитаю ждать, пока появятся возможности для повышения или роста.",
            "Г) Не планирую ничего менять, так как не вижу перспектив или не заинтересован в росте."
        ]
    },
    {
        "text": "23. Как вы воспринимаете обратную связь от коллег или руководителей на работе?",
        "options": [
            "А) Ценю критику, так как она помогает мне расти и улучшать свои навыки.",
            "Б) Принимаю к сведению, но не всегда применяю на практике.",
            "В) Часто обижаюсь или воспринимаю критику слишком близко к сердцу.",
            "Г) Игнорирую, так как не считаю её полезной или конструктивной."
        ]
    },
    {
        "text": "24. Какие эмоции вы чаще всего испытываете в воскресенье вечером перед началом новой недели?",
        "options": [
            "А) Нетерпение и энтузиазм — я готов к новым вызовам и возможностям.",
            "Б) Спокойствие и уверенность — я чувствую себя подготовленным и расслабленным.",
            "В) Тревогу и беспокойство — мысли о предстоящих делах вызывают стресс.",
            "Г) Грусть и апатию — мне сложно расставаться с выходными и переключаться на работу."
        ]
    },
    {
        "text": "25. Если бы у вас была возможность сменить профессию, что бы вы выбрали?",
        "options": [
            "А) То, о чем давно мечтаю, даже если это требует кардинальных изменений.",
            "Б) Что-то более прибыльное или стабильное, чтобы улучшить финансовое положение.",
            "В) Не знаю, так как не уверен в своих желаниях или возможностях.",
            "Г) Ничего не стал бы менять, так как доволен текущей профессией."
        ]
    },
    {
        "text": "26. Какую книгу или литературу вы читали за последний месяц, и как она повлияла на вас?",
        "options": [
            "А) Книгу по саморазвитию, профессиональному росту или психологии — она вдохновила меня на изменения.",
            "Б) Художественную литературу — это был способ расслабиться и отвлечься.",
            "В) Не читал ничего, так как не было времени или желания.",
            "Г) Не люблю читать и предпочитаю другие способы проведения досуга."
        ]
    },
    {
        "text": "27. Какое ваше самое значимое достижение за последний год, и как оно повлияло на вашу жизнь?",
        "options": [
            "А) Реализовал личный проект или цель, которая была важна для меня.",
            "Б) Научился новому навыку или получил новые знания, которые пригодились в жизни.",
            "В) Не могу вспомнить ничего значительного, что можно было бы назвать достижением.",
            "Г) Просто справлялся с трудностями и выживал в сложных обстоятельствах."
        ]
    },
    {
        "text": "28. Как вы проводите время, когда остаётесь наедине с собой?",
        "options": [
            "А) Занимаюсь планированием, медитацией, учусь или работаю над личными проектами.",
            "Б) Смотрю сериалы, фильмы или развлекательный контент.",
            "В) Листаю социальные сети или провожу время в интернете без конкретной цели.",
            "Г) Часто скучаю и не знаю, чем себя занять."
        ]
    },
    {
        "text": "29. Какая ваша самая амбициозная мечта, и что она для вас значит?",
        "options": [
            "А) Создать свой бизнес или проект, который изменит жизнь других людей.",
            "Б) Путешествовать по миру, познавать новые культуры и получать яркие впечатления.",
            "В) Полностью изменить свою жизнь, начав с чистого листа.",
            "Г) У меня нет конкретной мечты, или я не задумываюсь об этом."
        ]
    },
    {
        "text": "30. Что является основным препятствием на пути к реализации вашей мечты?",
        "options": [
            "А) Ничего — я уже активно работаю над её воплощением.",
            "Б) Страх неудачи или отсутствие уверенности в своих силах.",
            "В) Нехватка финансовых, временных или других ресурсов.",
            "Г) Лень или отсутствие мотивации для активных действий."
        ]
    },
    {
        "text": "31. Как вы распределяете свое время, и на какие сферы жизни тратите большую его часть?",
        "options": [
            "А) Работа, профессиональное развитие, обучение и саморазвитие.",
            "Б) Общение с семьей, друзьями и близкими, поддержание отношений.",
            "В) Развлечения, отдых, хобби и досуг.",
            "Г) Затрудняюсь ответить, так как не отслеживаю, куда уходит время."
        ]
    },
    {
        "text": "32. Как вы справляетесь с необходимостью отказывать людям или задачам, которые не соответствуют вашим приоритетам?",
        "options": [
            "А) Всегда говорю 'нет', если это не соответствует моим целям или ценностям.",
            "Б) Иногда соглашаюсь, чтобы избежать конфликтов или из вежливости.",
            "В) Редко отказываю, даже если это вредит моим планам.",
            "Г) Практически никогда не говорю 'нет', даже если это негативно влияет на мою жизнь."
        ]
    },
    {
        "text": "33. Если бы у вас была возможность устранить что-то одно из своей жизни, что бы это было?",
        "options": [
            "А) Токсичные люди, которые истощают мою энергию и негативно влияют на мое состояние.",
            "Б) Вредные привычки, которые мешают мне достигать целей или поддерживать здоровье.",
            "В) Работа, которая не приносит удовлетворения или не соответствует моим интересам.",
            "Г) Не могу определиться, так как не знаю, что именно мешает мне жить лучше."
        ]
    },
    {
        "text": "34. Как вы подходите к планированию и достижению долгосрочных целей?",
        "options": [
            "А) Разбиваю цели на этапы, ставлю четкие задачи и регулярно отслеживаю прогресс.",
            "Б) Думаю о своих целях, но не записываю их и не структурирую действия.",
            "В) У меня нет долгосрочных целей, я живу сегодняшним днем.",
            "Г) Не вижу смысла в планировании, так как считаю, что жизнь непредсказуема."
        ]
    },
    {
        "text": "35. Как бы вы описали свой идеальный день, если бы могли спланировать его без ограничений?",
        "options": [
            "А) День, наполненный продуктивной работой, достижением целей и временем для личного развития и отдыха.",
            "Б) День, проведенный в кругу близких людей, с возможностью расслабиться и насладиться общением.",
            "В) День, когда можно ничего не делать, просто отдыхать и заниматься тем, что приносит удовольствие.",
            "Г) Никогда не задумывался об этом, так как не представляю, что могло бы быть идеальным."
        ]
    },
    {
        "text": "36. Что вызывает у вас наибольший страх или беспокойство в жизни?",
        "options": [
            "А) Страх не реализовать свой потенциал и не достичь поставленных целей.",
            "Б) Страх одиночества, потери близких или отсутствия поддержки.",
            "В) Страх финансовой нестабильности, долгов или невозможности обеспечить себя и свою семью.",
            "Г) Ничего не вызывает страха, я не склонен к тревогам."
        ]
    },
    {
        "text": "37. Как вы обычно реагируете на неудачи или провалы?",
        "options": [
            "А) Анализирую ошибки, делаю выводы и пробую снова, чтобы добиться успеха.",
            "Б) Позволяю себе почувствовать разочарование, но затем стараюсь двигаться дальше.",
            "В) Виню других людей или обстоятельства в своих неудачах.",
            "Г) Сдаюсь и теряю мотивацию продолжать."
        ]
    },
    {
        "text": "38. Как вы воспринимаете изменения в жизни?",
        "options": [
            "А) Вижу в них возможность для роста, развития и новых достижений.",
            "Б) Считаю их стрессовыми, но необходимыми для прогресса.",
            "В) Стараюсь избегать изменений, так как они вызывают дискомфорт.",
            "Г) Ненавижу изменения, так как они нарушают привычный уклад жизни."
        ]
    },
    {
        "text": "39. Что чаще всего мешает вам начать новое дело или проект?",
        "options": [
            "А) Ничего — я уже начал действовать и двигаюсь к своим целям.",
            "Б) Страх неудачи или страх неизвестности.",
            "В) Нехватка знаний, навыков или ресурсов для старта.",
            "Г) Лень или отсутствие мотивации."
        ]
    },
    {
        "text": "40. Если бы у вас был один день, в котором вы могли бы делать что угодно без ограничений, как бы вы его провели?",
        "options": [
            "А) Запустил бы проект своей мечты или начал что-то значимое для себя и мира.",
            "Б) Помог бы другим людям, сделал что-то полезное для общества.",
            "В) Отдохнул бы в уединенном месте, например, на острове, чтобы восстановить силы.",
            "Г) Не знаю, как бы использовал такой день, так как не задумывался об этом."
        ]
    },
    {
        "text": "41. Кто или что вдохновляет вас на личностный рост и служит вашим главным примером для подражания?",
        "options": [
            "А) Известные личности, такие как успешные предприниматели, учёные или общественные деятели, чьи достижения и принципы меня мотивируют.",
            "Б) Близкие люди: родители, друзья или наставники, чьи качества и поступки я ценю и стараюсь перенять.",
            "В) Вымышленные герои из книг, фильмов или игр, чьи характеры, решения или истории меня вдохновляют.",
            "Г) У меня нет конкретного примера для подражания; я стараюсь идти своим путём."
        ]
    },
    {
        "text": "42. Как вы определяете для себя понятие счастья и что делает вашу жизнь наполненной?",
        "options": [
            "А) Гармония и баланс во всех сферах жизни: работе, отношениях, здоровье и личном развитии.",
            "Б) Достижение поставленных целей, чувство прогресса и удовлетворение от результатов.",
            "В) Любовь, поддержка близких и тёплые отношения в семье.",
            "Г) Я редко задумываюсь о том, что такое счастье, и не пытаюсь его определить."
        ]
    },
    {
        "text": "43. Каким образом вы вносите вклад в жизнь других людей и помогаете им?",
        "options": [
            "А) Участвую в волонтёрских проектах, делюсь знаниями через менторство или поддерживаю общественные инициативы.",
            "Б) Оказываю эмоциональную и практическую поддержку своим близким: семье, друзьям или коллегам.",
            "В) Помогаю редко, только в исключительных случаях или когда меня об этом просят.",
            "Г) Я не занимаюсь помощью другим, так как сосредоточен на своих делах."
        ]
    },
    {
        "text": "44. Какое наследие или вклад вы хотели бы оставить после себя в этом мире?",
        "options": [
            "А) Значимый проект, идею или дело, которые повлияют на общество или будущие поколения.",
            "Б) Добрые воспоминания и положительное влияние на жизни окружающих меня людей.",
            "В) Я никогда не задумывался о том, что оставлю после себя.",
            "Г) Мне не важно, что останется после меня; я живу настоящим."
        ]
    },
    {
        "text": "45. Какое правило или принцип является для вас главным ориентиром в жизни?",
        "options": [
            "А) 'Действуй, несмотря на страх' — я стараюсь преодолевать свои страхи и двигаться вперёд.",
            "Б) 'Живи здесь и сейчас' — я ценю текущий момент и стараюсь не зацикливаться на прошлом или будущем.",
            "В) 'Не навреди' — я стремлюсь быть осознанным и не причинять вреда другим людям или себе.",
            "Г) У меня нет чётких жизненных правил; я действую по ситуации."
        ]
    },
    {
        "text": "46. Какие конкретные шаги вы готовы предпринять завтра, чтобы улучшить свою жизнь?",
        "options": [
            "А) Начну развивать новые навыки: запишусь на курс, тренинг или начну изучать что-то полезное.",
            "Б) Составлю детальный план действий для достижения своих целей и начну его реализовывать.",
            "В) Подумаю о том, что можно изменить, но не уверен, что начну действовать сразу.",
            "Г) Я не планирую ничего менять; всё и так устраивает."
        ]
    },
    {
        "text": "47. Как часто вы анализируете и корректируете свои цели и жизненные приоритеты?",
        "options": [
            "А) Регулярно, примерно раз в месяц, чтобы быть уверенным, что двигаюсь в правильном направлении.",
            "Б) Периодически, раз в полгода, чтобы оценить прогресс и внести изменения.",
            "В) Редко, только в конце года или когда возникают значительные изменения в жизни.",
            "Г) Я никогда не пересматриваю свои цели; ставлю их один раз и следую им."
        ]
    },
    {
        "text": "48. Что вы готовы изменить в своей жизни прямо сейчас, чтобы стать лучше или достичь большего?",
        "options": [
            "А) Пересмотрю и оптимизирую свой распорядок дня, чтобы быть более продуктивным.",
            "Б) Поработаю над улучшением отношений с близкими: больше общения, поддержки и понимания.",
            "В) Изменю подход к работе или карьере: начну искать новые возможности или развивать навыки.",
            "Г) Я не готов ничего менять прямо сейчас; всё устраивает."
        ]
    },
    {
        "text": "49. Как, по вашему мнению, ваша будущая версия через 5 лет оценит ваши текущие действия и решения?",
        "options": [
            "А) 'Ты молодец, мы всё смогли! Твои усилия принесли плоды, и мы гордимся собой.'",
            "Б) 'Почему ты не рискнул? Возможно, стоило быть смелее и решительнее.'",
            "В) 'Жаль, что ты не начал раньше; время было упущено, но лучше поздно, чем никогда.'",
            "Г) 'Всё как обычно; ничего существенного не изменилось.'"
        ]
    },
    {
        "text": "50. Закончите фразу: 'Я достоин…'",
        "options": [
            "А) Успеха, счастья и реализации своего потенциала.",
            "Б) Большего, чем имею сейчас, и готов работать для этого.",
            "В) Того, что есть, и благодарен за это.",
            "Г) Я не знаю, чего я достоин; мне сложно ответить на этот вопрос."
        ]
    }
]

# Вопросы для игры "Компас компетенций"
compass_questions = [
    {
        "text": "1. Как вы обычно справляетесь с новыми задачами?",
        "options": ["А) Легко адаптируюсь и быстро нахожу решение.", "Б) Нужно время, чтобы разобраться, но потом всё получается.", "В) Предпочитаю задачи, которые уже знаю и умею делать."]
    },
    {
        "text": "2. Как вы работаете в команде?",
        "options": ["А) Беру на себя лидерскую роль и организую процесс.", "Б) Стараюсь поддерживать коллег и помогать, если это нужно.", "В) Предпочитаю работать самостоятельно."]
    },
    {
        "text": "3. Как вы относитесь к срокам и дедлайнам?",
        "options": ["А) Всегда сдаю работу вовремя, даже если это требует усилий.", "Б) Иногда затягиваю, но в последний момент успеваю.", "В) Часто испытываю трудности с соблюдением сроков."]
    },
    {
        "text": "4. Как вы реагируете на критику?",
        "options": ["А) Использую её для улучшения своих результатов.", "Б) Стараюсь прислушаться, но иногда это неприятно.", "В) Критика часто выбивает меня из колеи."]
    },
    {
        "text": "5. Как вы планируете свои задачи?",
        "options": ["А) Составляю чёткий план и следую ему.", "Б) Планирую, но иногда отступаю от плана.", "В) Предпочитаю действовать по ситуации."]
    },
    {
        "text": "6. Как вы справляетесь со стрессом?",
        "options": ["А) Сохраняю спокойствие и ищу решение.", "Б) Иногда нервничаю, но стараюсь держать себя в руках.", "В) Часто теряюсь и не знаю, как действовать."]
    },
    {
        "text": "7. Как вы относитесь к обучению новому?",
        "options": ["А) Постоянно ищу возможности для развития.", "Б) Учусь, если это необходимо для работы.", "В) Предпочитаю не менять то, что уже знаю."]
    },
    {
        "text": "8. Как вы решаете конфликты на работе?",
        "options": ["А) Стараюсь найти компромисс и уладить ситуацию.", "Б) Избегаю конфликтов, но если нужно, могу постоять за себя.", "В) Часто теряюсь и не знаю, как поступить."]
    },
    {
        "text": "9. Как вы относитесь к многозадачности?",
        "options": ["А) Легко справляюсь с несколькими задачами одновременно.", "Б) Стараюсь сосредоточиться на одной задаче, но могу переключаться.", "В) Многозадачность меня сильно утомляет."]
    },
    {
        "text": "10. Как вы оцениваете свои коммуникативные навыки?",
        "options": ["А) Легко нахожу общий язык с коллегами и клиентами.", "Б) Общаюсь, если это необходимо, но не всегда инициативен.", "В) Предпочитаю минимум общения на работе."]
    }
]
labyrinth_questions = [
    {
        "text": "**Этап 1: Начало проекта**\nВы только что получили задачу — разработать новый продукт. С чего вы начнёте?",
        "options": [
            "А) Соберу команду и проведу мозговой штурм.",
            "Б) Изучу рынок и конкурентов, чтобы понять, что нужно клиентам.",
            "В) Начну сразу разрабатывать прототип, чтобы быстрее получить результат."
        ]
    },
    {
        "text": "**Этап 2: Работа в команде**\nВаша команда предлагает разные идеи. Как вы поступите?",
        "options": [
            "А) Выберу одну идею и сосредоточусь на ней.",
            "Б) Попробую объединить несколько идей в одну.",
            "В) Дам команде время подумать ещё, чтобы не упустить лучшее решение."
        ]
    },
    {
        "text": "**Этап 3: Сроки**\nСроки поджимают, но продукт ещё не готов. Что вы сделаете?",
        "options": [
            "А) Попрошу продлить сроки, чтобы сделать всё качественно.",
            "Б) Упрощу некоторые функции, чтобы успеть в срок.",
            "В) Работаю сверхурочно, чтобы успеть."
        ]
    },
    {
        "text": "**Этап 4: Конфликт в команде**\nДва члена команды не могут договориться по ключевому вопросу. Как вы поступите?",
        "options": [
            "А) Выслушаю обе стороны и предложу компромисс.",
            "Б) Приму решение самостоятельно, чтобы не тратить время.",
            "В) Отложу решение, чтобы конфликт утих."
        ]
    },
    {
        "text": "**Этап 5: Презентация продукта**\nПродукт готов, но вы не уверены, что он идеален. Как вы поступите?",
        "options": [
            "А) Презентую продукт как есть, чтобы получить обратную связь.",
            "Б) Отложу презентацию, чтобы доработать детали.",
            "В) Презентую, но с оговорками, что продукт ещё в разработке."
        ]
    }
]
career_quest_questions = [
    {
        "text": "Вы стоите на перекрёстке карьерных возможностей. Куда вы пойдёте?",
        "options": [
            "А) Пойти на повышение, даже если это означает больше ответственности.",
            "Б) Остаться на текущей должности, но развивать свои навыки.",
            "В) Сменить сферу деятельности на что-то совершенно новое."
        ]
    },
    {
        "text": "**Выбор 2**\nЧто для вас важнее?",
        "options": [
            "А) Сосредоточиться на заработке и финансовой стабильности.",
            "Б) Выбрать работу, которая приносит удовольствие, даже если зарплата ниже.",
            "В) Искать баланс между доходом и удовлетворением от работы."
        ]
    },
    {
        "text": "**Выбор 3**\nКакой формат работы вы предпочитаете?",
        "options": [
            "А) Работать в крупной компании с чёткими процессами.",
            "Б) Присоединиться к стартапу, где больше свободы и возможностей для творчества.",
            "В) Открыть собственное дело."
        ]
    },
    {
        "text": "**Ситуация 1**\nКоллега постоянно перекладывает на вас свои задачи. Ваши действия?",
        "options": [
            "А) Поговорю с ним напрямую и обозначу границы.",
            "Б) Пожалуюсь руководителю.",
            "В) Продолжу выполнять задачи, чтобы избежать конфликта."
        ]
    },
    {
        "text": "**Ситуация 2**\nРуководитель критикует ваш проект. Как вы отреагируете?",
        "options": [
            "А) Выслушаю критику и предложу варианты улучшения.",
            "Б) Попрошу конкретные примеры, чтобы понять, что не так.",
            "В) Обижусь и буду защищать свою работу."
        ]
    },
    {
        "text": "**Ситуация 3**\nВ команде возник конфликт из-за распределения задач. Как вы поступите?",
        "options": [
            "А) Предложу провести встречу и обсудить проблему.",
            "Б) Попробую самостоятельно распределить задачи справедливо.",
            "В) Останусь в стороне, чтобы не участвовать в конфликте."
        ]
    },
    {
        "text": "**Этап 1: Планирование**\nУ вас есть месяц на выполнение проекта. Как вы начнёте?",
        "options": [
            "А) Разобью проект на этапы и составлю подробный план.",
            "Б) Начну с самых сложных задач, чтобы быстрее с ними разобраться.",
            "В) Начну с простых задач, чтобы войти в ритм."
        ]
    },
    {
        "text": "**Этап 2: Ресурсы**\nВам не хватает людей для выполнения задачи. Что вы сделаете?",
        "options": [
            "А) Попрошу помощи у других отделов.",
            "Б) Перераспределю задачи внутри команды.",
            "В) Увеличу свои рабочие часы, чтобы всё успеть."
        ]
    },
    {
        "text": "**Этап 3: Проблемы**\nНа полпути к дедлайну вы понимаете, что проект отстаёт от графика. Ваши действия?",
        "options": [
            "А) Пересмотрю план и оптимизирую процессы.",
            "Б) Попрошу продлить сроки.",
            "В) Ускорю темп работы, даже если это скажется на качестве."
        ]
    }
]
career_strategy_questions = [
    {
        "text": "**Глава 1: Старт проекта**\nВы — менеджер нового продукта в IT-компании. Вам нужно запустить приложение за 3 месяца.\n1. **Планирование:**",
        "options": [
            "А) Создать детальный план с этапами и дедлайнами.",
            "Б) Провести мозговой штурм с командой для генерации идей.",
            "В) Сосредоточиться на анализе рисков и «подводных камней»."
        ]
    },
    {
        "text": "2. **Распределение ролей:**",
        "options": [
            "А) Назначить ответственных за каждый этап, исходя из их опыта.",
            "Б) Дать команде выбрать задачи самостоятельно.",
            "В) Взять ключевые задачи на себя, чтобы контролировать результат."
        ]
    },
    {
        "text": "3. **Первая проблема:** Один из разработчиков уходит в отпуск на месяц.",
        "options": [
            "А) Нанять временного сотрудника.",
            "Б) Перераспределить его задачи внутри команды.",
            "В) Перенести сроки проекта."
        ]
    },
    {
        "text": "**Глава 2: Командные конфликты**\nВ команде нарастает напряжение из-за сжатых сроков.\n4. **Конфликт между дизайнером и разработчиком:**",
        "options": [
            "А) Устроить медиацию и найти компромисс.",
            "Б) Принять сторону того, чье решение эффективнее для проекта.",
            "В) Попросить руководителя вмешаться."
        ]
    },
    {
        "text": "5. **Мотивация команды:**",
        "options": [
            "А) Устроить неформальную встречу для разрядки обстановки.",
            "Б) Пообещать премию за выполнение сроков.",
            "В) Напомнить о важности проекта для компании."
        ]
    },
    {
        "text": "6. **Срыв дедлайна:** Тестирование выявило критичные баги.",
        "options": [
            "А) Выпустить MVP (минимальную версию продукта) и доработать позже.",
            "Б) Перенести релиз и исправить ошибки.",
            "В) Увеличить нагрузку на команду для ускорения исправлений."
        ]
    },
    {
        "text": "**Глава 3: Финал и рефлексия**\n7. **Презентация продукта:** Клиент недоволен функционалом.",
        "options": [
            "А) Предложить бесплатные доработки.",
            "Б) Объяснить ограничения сроков и бюджета.",
            "В) Попросить команду срочно добавить недостающие функции."
        ]
    },
    {
        "text": "8. **Анализ результатов:**\nПроект завершен, но с задержкой. Как вы оцениваете свой вклад?",
        "options": [
            "А) «Я сплотил команду, но не успел за сроками».",
            "Б) «Мы выполнили главное, но потеряли в качестве».",
            "В) «Я взял слишком много на себя, что вызвало стресс»."
        ]
    }
]
office_chronicles_questions = [
    {
        "text": "**Уровень 1: Стажер**\n1. Вам поручили рутинную задачу. Ваши действия:",
        "options": [
            "А) Выполнить идеально, даже если это займет время.",
            "Б) Сделать быстро, чтобы взяться за более интересные задачи.",
            "В) Попросить коллегу помочь, чтобы научиться."
        ]
    },
    {
        "text": "2. Коллега критикует вашу идею на собрании:",
        "options": [
            "А) Прислушаться и доработать предложение.",
            "Б) Вежливо отстоять свою позицию.",
            "В) Промолчать, чтобы избежать конфликта."
        ]
    },
    {
        "text": "**Уровень 2: Специалист**\n3. Вам предложили возглавить небольшой проект:",
        "options": [
            "А) Согласиться и сразу начать планировать.",
            "Б) Попросить время на раздумья.",
            "В) Отказаться, сославшись на нехватку опыта."
        ]
    },
    {
        "text": "4. Подчиненный не справляется с задачей:",
        "options": [
            "А) Обсудить с ним проблему и предложить помощь.",
            "Б) Передать задачу другому сотруднику.",
            "В) Дать жесткий дедлайн для мотивации."
        ]
    },
    {
        "text": "**Уровень 3: Руководитель**\n5. Нужно уволить сотрудника из-за сокращения бюджета:",
        "options": [
            "А) Выбрать того, кто хуже всего выполняет KPI.",
            "Б) Провести собрание и спросить мнение команды.",
            "В) Уволить новичка, чтобы сохранить костяк команды."
        ]
    },
    {
        "text": "6. Компания переходит на удаленку. Ваши действия:",
        "options": [
            "А) Внедрить жесткий контроль через ежедневные отчеты.",
            "Б) Довериться команде и оценивать только результат.",
            "В) Провести тренинг по тайм-менеджменту."
        ]
    }
]
crisis_manager_questions = [
    {
        "text": "**Сценарий:**\nВы — руководитель отдела в компании, которая столкнулась с серьезным кризисом (например, утечка данных, срыв поставок или скандал в СМИ).\n1. **Первая реакция:**",
        "options": [
            "А) Собрать экстренное совещание для анализа ситуации.",
            "Б) Немедленно начать действовать, чтобы минимизировать ущерб.",
            "В) Обратиться за помощью к вышестоящему руководству."
        ]
    },
    {
        "text": "2. **Коммуникация с командой:**",
        "options": [
            "А) Сообщить правду, но сохранить спокойствие и уверенность.",
            "Б) Дать только ту информацию, которая необходима для выполнения задач.",
            "В) Попросить команду сосредоточиться на работе и не паниковать."
        ]
    },
    {
        "text": "3. **Работа с внешними сторонами:**",
        "options": [
            "А) Подготовить официальное заявление для клиентов и партнеров.",
            "Б) Назначить ответственного за коммуникацию с внешними сторонами.",
            "В) Временно ограничить доступ к информации, чтобы избежать паники."
        ]
    },
    {
        "text": "4. **Долгосрочные действия:**",
        "options": [
            "А) Разработать план по предотвращению подобных ситуаций в будущем.",
            "Б) Провести внутреннее расследование и наказать виновных.",
            "В) Укрепить команду через тренинги и обучение."
        ]
    }
]
negotiations_questions = [
    {
        "text": "**Сценарий:**\nВы представляете свою компанию на переговорах с ключевым партнером. Нужно заключить выгодный контракт, но условия сложные.\n1. **Подготовка:**",
        "options": [
            "А) Изучить все детали контракта и подготовить аргументы.",
            "Б) Провести мозговой штурм с командой для поиска креативных решений.",
            "В) Настроиться на гибкость и готовность к компромиссам."
        ]
    },
    {
        "text": "2. **Начало переговоров:**",
        "options": [
            "А) Начать с обсуждения общих целей и интересов.",
            "Б) Сразу предложить свои условия.",
            "В) Выслушать партнера, чтобы понять его позицию."
        ]
    },
    {
        "text": "3. **Конфликт интересов:**",
        "options": [
            "А) Предложить альтернативное решение, которое устроит обе стороны.",
            "Б) Настаивать на своих условиях, аргументируя их выгодами.",
            "В) Взять паузу, чтобы обдумать следующий шаг."
        ]
    },
    {
        "text": "4. **Завершение переговоров:**",
        "options": [
            "А) Заключить контракт на своих условиях.",
            "Б) Пойти на уступки ради долгосрочного сотрудничества.",
            "В) Отложить подписание, чтобы доработать детали."
        ]
    }
]
team_spirit_questions = [
    {
        "text": "**Сценарий:**\nВы — участник проекта, где каждый член команды имеет свои сильные и слабые стороны.\n1. **Распределение задач:**",
        "options": [
            "А) Предложить каждому выбрать то, что ему интересно.",
            "Б) Распределить задачи в зависимости от опыта и навыков.",
            "В) Взять на себя координацию, чтобы все шло по плану."
        ]
    },
    {
        "text": "2. **Конфликт в команде:**",
        "options": [
            "А) Выступить медиатором и помочь найти компромисс.",
            "Б) Обратиться к руководителю за решением.",
            "В) Предложить перераспределить задачи, чтобы снизить напряжение."
        ]
    },
    {
        "text": "3. **Мотивация:**",
        "options": [
            "А) Организовать неформальное мероприятие для сплочения команды.",
            "Б) Напомнить о важности проекта и общих целях.",
            "В) Поощрить лучших участников публично."
        ]
    },
    {
        "text": "4. **Результаты проекта:**",
        "options": [
            "А) Провести ретроспективу, чтобы обсудить успехи и ошибки.",
            "Б) Поблагодарить команду за работу и отметить достижения.",
            "В) Предложить план улучшений для следующих проектов."
        ]
    }
]
team_balance_questions = [
    {
        "text": "**Этап 1: Знакомство с командой**\n1. Вас представляют команде. Как вы начнёте общение?",
        "options": [
            "А) Расскажу о себе и своих навыках.",
            "Б) Задам вопросы коллегам, чтобы узнать их лучше.",
            "В) Начну с шутки, чтобы разрядить обстановку."
        ]
    },
    {
        "text": "2. Один из коллег кажется замкнутым. Ваши действия?",
        "options": [
            "А) Постараюсь вовлечь его в разговор.",
            "Б) Оставлю его в покое, чтобы не нарушать его комфорт.",
            "В) Предложу ему помочь с задачей, чтобы наладить контакт."
        ]
    },
    {
        "text": "**Этап 2: Работа над проектом**\n3. Коллега предлагает идею, которая кажется вам неудачной.",
        "options": [
            "А) Вежливо выскажу свои сомнения.",
            "Б) Поддержу идею, чтобы не создавать конфликт.",
            "В) Предложу доработать идею вместе."
        ]
    },
    {
        "text": "4. Вы замечаете, что один из коллег перегружен.",
        "options": [
            "А) Предложу свою помощь.",
            "Б) Сообщу руководителю о проблеме.",
            "В) Оставлю всё как есть — это не моя ответственность."
        ]
    },
    {
        "text": "5. Команда не может прийти к единому решению.",
        "options": [
            "А) Предложу провести голосование.",
            "Б) Попробую найти компромисс.",
            "В) Настоятельно предложу свой вариант."
        ]
    },
    {
        "text": "**Этап 3: Конфликт и его разрешение**\n6. Коллега критикует вашу работу при всех.",
        "options": [
            "А) Спокойно выслушаю и предложу обсудить это позже.",
            "Б) Отвечу тем же, чтобы защитить себя.",
            "В) Промолчу, чтобы не усугублять ситуацию."
        ]
    },
    {
        "text": "7. Вы замечаете, что два коллеги конфликтуют.",
        "options": [
            "А) Предложу им поговорить наедине.",
            "Б) Сообщу руководителю.",
            "В) Постараюсь отвлечь их шуткой."
        ]
    },
    {
        "text": "**Этап 4: Финальный анализ**\n8. Проект завершён, но результат не идеален.",
        "options": [
            "А) Сосредоточусь на том, что получилось хорошо.",
            "Б) Проведу анализ ошибок, чтобы избежать их в будущем.",
            "В) Обвиню коллег в недостаточной вовлечённости."
        ]
    }
]
leadership_path_questions = [
    {
        "text": "**Этап 1: Первые шаги**\n1. Как вы начнёте свою работу в качестве руководителя?",
        "options": [
            "А) Проведу встречу с командой, чтобы узнать их ожидания.",
            "Б) Изучу текущие процессы и проблемы.",
            "В) Назначу встречи с каждым сотрудником индивидуально."
        ]
    },
    {
        "text": "2. Один из сотрудников сомневается в вашем опыте.",
        "options": [
            "А) Поделюсь своими достижениями, чтобы завоевать доверие.",
            "Б) Предложу ему задать вопросы, чтобы развеять сомнения.",
            "В) Игнорирую — время покажет мои компетенции."
        ]
    },
    {
        "text": "**Этап 2: Решение проблем**\n3. Команда не справляется с дедлайнами.",
        "options": [
            "А) Пересмотрю распределение задач.",
            "Б) Введу дополнительные контрольные точки.",
            "В) Устрою командное собрание для обсуждения проблем."
        ]
    },
    {
        "text": "4. Сотрудник просит повышения, но его результаты средние.",
        "options": [
            "А) Объясню, что нужно улучшить для повышения.",
            "Б) Пообещаю рассмотреть его кандидатуру в будущем.",
            "В) Откажу, чтобы не создавать прецедент."
        ]
    },
    {
        "text": "5. В команде нарастает напряжение из-за перегрузки.",
        "options": [
            "А) Устрою неформальное мероприятие для разрядки.",
            "Б) Предложу гибкий график работы.",
            "В) Напомню о важности проекта и необходимости работать усерднее."
        ]
    },
    {
        "text": "**Этап 3: Мотивация и развитие**\n6. Как вы будете мотивировать команду?",
        "options": [
            "А) Введу систему поощрений за достижения.",
            "Б) Проведу тренинг по личностному росту.",
            "В) Поделюсь своим видением успеха и вдохновлю команду."
        ]
    },
    {
        "text": "7. Один из сотрудников предлагает рискованную идею.",
        "options": [
            "А) Поддержу, если идея имеет потенциал.",
            "Б) Предложу протестировать её в небольшом масштабе.",
            "В) Отклоню, чтобы избежать рисков."
        ]
    },
    {
        "text": "**Этап 4: Финальный анализ**\n8. Проект завершён успешно. Как вы оцениваете свою роль?",
        "options": [
            "А) «Я создал условия для успеха команды».",
            "Б) «Я решал проблемы и поддерживал баланс».",
            "В) «Я взял на себя ответственность за ключевые решения»."
        ]
    }
]
company_culture_questions = [
    {
        "text": "**Этап 1: Ценности компании**\n1. Компания ценит инновации. Как вы обычно подходите к новым задачам?",
        "options": [
            "А) Всегда ищу нестандартные решения.",
            "Б) Стараюсь следовать проверенным методам.",
            "В) Комбинирую новое и старое."
        ]
    },
    {
        "text": "2. Компания делает акцент на командной работе. Как вы работаете в команде?",
        "options": [
            "А) Беру на себя лидерскую роль.",
            "Б) Поддерживаю коллег и помогаю, если нужно.",
            "В) Предпочитаю работать самостоятельно."
        ]
    },
    {
        "text": "**Этап 2: Поведение в офисе**\n3. В компании принято делиться идеями на общих собраниях. Как вы поступите?",
        "options": [
            "А) Активно выскажу свои идеи.",
            "Б) Выслушаю других и добавлю что-то, если будет уместно.",
            "В) Промолчу, чтобы не выделяться."
        ]
    },
    {
        "text": "4. В компании поощряют неформальное общение. Как вы себя поведёте?",
        "options": [
            "А) Буду участвовать в неформальных мероприятиях.",
            "Б) Буду общаться только по работе.",
            "В) Выберу пару коллег для неформального общения."
        ]
    },
    {
        "text": "**Этап 3: Решение конфликтов**\n5. В компании ценят открытость. Как вы поступите, если не согласны с коллегой?",
        "options": [
            "А) Открыто выскажу своё мнение.",
            "Б) Постараюсь найти компромисс.",
            "В) Промолчу, чтобы избежать конфликта."
        ]
    },
    {
        "text": "6. В компании принято обсуждать ошибки для улучшения процессов. Как вы отреагируете на критику?",
        "options": [
            "А) Приму её как возможность для роста.",
            "Б) Постараюсь объяснить свою позицию.",
            "В) Обижусь, но промолчу."
        ]
    }
]
global_culture_mix_questions = [
    {
        "text": "**Этап 1: Понимание культурных различий**\n1. Ваш коллега из другой страны часто опаздывает. Как вы поступите?",
        "options": [
            "А) Поговорю с ним о важности пунктуальности.",
            "Б) Учту, что в его культуре время воспринимается иначе.",
            "В) Пожалуюсь руководителю."
        ]
    },
    {
        "text": "2. В вашей команде есть коллега, который избегает зрительного контакта.",
        "options": [
            "А) Решу, что он не уверен в себе.",
            "Б) Узнаю, принято ли это в его культуре.",
            "В) Попрошу его смотреть в глаза при разговоре."
        ]
    },
    {
        "text": "**Этап 2: Адаптация к новым нормам**\n3. В новой стране вас пригласили на ужин, но блюдо кажется вам странным.",
        "options": [
            "А) Попробую, чтобы проявить уважение.",
            "Б) Вежливо откажусь, объяснив причину.",
            "В) Скажу, что не голоден."
        ]
    },
    {
        "text": "4. Вас попросили работать в праздник, который важен для вашей культуры.",
        "options": [
            "А) Откажусь, чтобы отметить праздник.",
            "Б) Попрошу перенести задачу на другой день.",
            "В) Соглашусь, чтобы не создавать проблем."
        ]
    }
]
cultural_detective_questions = [
    {
        "text": "**Этап 1: Наблюдение за поведением**\n1. Вы замечаете, что коллеги избегают открытых конфликтов.",
        "options": [
            "А) Начну действовать так же.",
            "Б) Буду вести себя как обычно.",
            "В) Попробую понять, почему это важно для них."
        ]
    },
    {
        "text": "2. В компании принято начинать встречи с неформального общения.",
        "options": [
            "А) Буду участвовать в таких разговорах.",
            "Б) Перейду сразу к делу.",
            "В) Буду наблюдать, но не участвовать."
        ]
    },
    {
        "text": "**Этап 2: Адаптация к нормам**\n3. В компании не принято критиковать идеи публично.",
        "options": [
            "А) Буду высказывать критику только наедине.",
            "Б) Буду критиковать, если это необходимо.",
            "В) Избегу критики вообще."
        ]
    },
    {
        "text": "4. В компании ценят иерархию. Как вы поступите, если не согласны с руководителем?",
        "options": [
            "А) Вежливо выскажу своё мнение.",
            "Б) Промолчу, чтобы не нарушать иерархию.",
            "В) Обсужу это с коллегами за спиной руководителя."
        ]
    }
]
cultural_balance_questions = [
    {
        "text": "**Этап 1: Личные ценности vs. Корпоративные нормы**\n1. В компании принято работать сверхурочно, но вы цените work-life balance.",
        "options": [
            "А) Буду работать сверхурочно, чтобы вписаться.",
            "Б) Обсуду это с руководителем.",
            "В) Буду уходить вовремя, несмотря на нормы."
        ]
    },
    {
        "text": "2. В компании поощряют конкуренцию, но вы предпочитаете сотрудничество.",
        "options": [
            "А) Буду конкурировать, чтобы соответствовать.",
            "Б) Найду способ сочетать конкуренцию и сотрудничество.",
            "В) Буду действовать по своим принципам."
        ]
    },
    {
        "text": "**Этап 2: Решение дилемм**\n3. Вас попросили сделать что-то, что противоречит вашим принципам.",
        "options": [
            "А) Выполню, чтобы не создавать проблем.",
            "Б) Попробую найти компромисс.",
            "В) Откажусь, объяснив свою позицию."
        ]
    },
    {
        "text": "4. В компании принято отмечать успехи алкоголем, но вы не пьёте.",
        "options": [
            "А) Приду, но не буду пить.",
            "Б) Откажусь от участия.",
            "В) Предложу альтернативный способ празднования."
        ]
    }
]
cultural_expert_questions = [
    {
        "text": "**Этап 1: Понимание разных культур**\n1. В вашей команде есть коллеги из разных стран. Как вы начнёте работу?",
        "options": [
            "А) Узнаю больше об их культурах.",
            "Б) Буду действовать как обычно.",
            "В) Предложу всем адаптироваться к общей норме."
        ]
    },
    {
        "text": "2. Коллега из другой культуры обиделся на вашу шутку.",
        "options": [
            "А) Извинюсь и постараюсь понять, что его задело.",
            "Б) Объясню, что шутка была безобидной.",
            "В) Решу, что он слишком чувствительный."
        ]
    },
    {
        "text": "**Этап 2: Разрешение конфликтов**\n3. В команде возник конфликт из-за культурных различий.",
        "options": [
            "А) Проведу медиацию, чтобы найти компромисс.",
            "Б) Попрошу руководителя вмешаться.",
            "В) Предложу всем следовать общим правилам."
        ]
    },
    {
        "text": "4. Коллега из другой культуры не понимает вашу шутку.",
        "options": [
            "А) Объясню, что это культурная особенность.",
            "Б) Перестану шутить при нём.",
            "В) Решу, что он не имеет чувства юмора."
        ]
    }
]
stress_test_questions = [
    {
        "text": "**Этап 1: Начало испытания**\n1. Вам нужно срочно завершить проект, но коллеги не успевают с задачами.",
        "options": [
            "А) Перераспределю задачи, чтобы ускорить процесс.",
            "Б) Попрошу коллег работать сверхурочно.",
            "В) Сообщу руководителю о невозможности уложиться в срок."
        ]
    },
    {
        "text": "2. Вас критикуют за ошибку, которую вы не совершали.",
        "options": [
            "А) Спокойно объясню свою позицию.",
            "Б) Попрошу доказательства ошибки.",
            "В) Промолчу, чтобы избежать конфликта."
        ]
    },
    {
        "text": "**Этап 2: Пик давления**\n3. Вам нужно одновременно отвечать на звонки, писать отчёт и готовить презентацию.",
        "options": [
            "А) Составлю список приоритетов и начну с самого важного.",
            "Б) Попрошу коллег помочь с частью задач.",
            "В) Постараюсь сделать всё сразу, даже если качество пострадает."
        ]
    },
    {
        "text": "4. Вас просят выполнить задачу, которая выходит за рамки вашей компетенции.",
        "options": [
            "А) Попрошу дополнительные инструкции или обучение.",
            "Б) Попробую выполнить задачу, даже если не уверен в результате.",
            "В) Откажусь, чтобы не рисковать."
        ]
    },
    {
        "text": "5. В команде начинается паника из-за срыва сроков.",
        "options": [
            "А) Успокою коллег и предложу план действий.",
            "Б) Начну работать быстрее, чтобы компенсировать задержку.",
            "В) Попрошу руководителя взять ситуацию под контроль."
        ]
    },
    {
        "text": "**Этап 3: Разрешение кризиса**\n6. Вы понимаете, что допустили ошибку, которая может повлиять на проект.",
        "options": [
            "А) Немедленно сообщу о проблеме и предложу решение.",
            "Б) Постараюсь исправить ошибку самостоятельно.",
            "В) Надеюсь, что никто не заметит ошибку."
        ]
    },
    {
        "text": "7. Вам нужно успокоить коллегу, который находится на грани срыва.",
        "options": [
            "А) Выслушаю его и предложу помощь.",
            "Б) Предложу сделать перерыв и отдохнуть.",
            "В) Посоветую взять себя в руки и продолжить работу."
        ]
    },
    {
        "text": "**Этап 4: Финальный анализ**\n8. Кризис преодолён, но вы чувствуете сильную усталость.",
        "options": [
            "А) Проведу анализ ситуации, чтобы избежать подобного в будущем.",
            "Б) Возьму выходной, чтобы восстановить силы.",
            "В) Продолжу работать, чтобы не отставать от графика."
        ]
    }
]
stress_negotiations_questions = [
    {
        "text": "**Этап 1: Начало переговоров**\n1. Ваш оппонент начинает переговоры с агрессивного тона.",
        "options": [
            "А) Сохраняю спокойствие и предлагаю начать с фактов.",
            "Б) Отвечаю тем же, чтобы показать свою уверенность.",
            "В) Стараюсь избегать конфликта, уступая в мелочах."
        ]
    },
    {
        "text": "2. Вам нужно быстро принять решение, но информации недостаточно.",
        "options": [
            "А) Попрошу время на обдумывание.",
            "Б) Приму решение на основе имеющихся данных.",
            "В) Откажусь принимать решение, чтобы не рисковать."
        ]
    },
    {
        "text": "**Этап 2: Пик напряжения**\n3. Оппонент ставит вас в тупик неожиданным вопросом.",
        "options": [
            "А) Попрошу уточнить вопрос, чтобы выиграть время.",
            "Б) Постараюсь ответить, даже если не уверен в ответе.",
            "В) Промолчу, чтобы не ошибиться."
        ]
    },
    {
        "text": "4. Вам нужно убедить оппонента в своей правоте, но он не соглашается.",
        "options": [
            "А) Приведу дополнительные аргументы и примеры.",
            "Б) Предложу компромиссное решение.",
            "В) Настою на своём, даже если это приведёт к конфликту."
        ]
    },
    {
        "text": "5. Время на переговоры подходит к концу, но соглашение не достигнуто.",
        "options": [
            "А) Предложу продолжить переговоры позже.",
            "Б) Ускорю темп, чтобы успеть договориться.",
            "В) Откажусь от дальнейших переговоров."
        ]
    },
    {
        "text": "**Этап 3: Завершение переговоров**\n6. Оппонент предлагает невыгодные условия в последний момент.",
        "options": [
            "А) Вежливо откажусь и предложу альтернативу.",
            "Б) Приму условия, чтобы завершить переговоры.",
            "В) Прерву переговоры, чтобы не соглашаться на невыгодные условия."
        ]
    },
    {
        "text": "7. Переговоры завершены, но вы чувствуете, что могли бы добиться большего.",
        "options": [
            "А) Проведу анализ ошибок для будущих переговоров.",
            "Б) Сосредоточусь на том, что удалось достичь.",
            "В) Обвиню оппонента в нечестной игре."
        ]
    }
]
stress_emergency_questions = [
    {
        "text": "**Этап 1: Начало кризиса**\n1. Вам сообщают о срочной проблеме, которая требует немедленного решения.",
        "options": [
            "А) Соберу информацию и составлю план действий.",
            "Б) Начну действовать, даже если не всё понятно.",
            "В) Попрошу кого-то другого взять ситуацию под контроль."
        ]
    },
    {
        "text": "2. Вокруг вас начинается паника.",
        "options": [
            "А) Успокою окружающих и возьму на себя руководство.",
            "Б) Постараюсь сосредоточиться на своих действиях.",
            "В) Поддамся панике и начну действовать хаотично."
        ]
    },
    {
        "text": "**Этап 2: Пик кризиса**\n3. Вам нужно принять решение, которое повлияет на многих людей.",
        "options": [
            "А) Взвешу все за и против перед принятием решения.",
            "Б) Приму решение быстро, чтобы не терять время.",
            "В) Переложу ответственность на других."
        ]
    },
    {
        "text": "4. Вам нужно координировать действия нескольких людей.",
        "options": [
            "А) Чётко распределю задачи и буду контролировать выполнение.",
            "Б) Дам каждому свободу действий, чтобы ускорить процесс.",
            "В) Попрошу кого-то другого взять на себя координацию."
        ]
    },
    {
        "text": "5. Ситуация ухудшается, несмотря на ваши усилия.",
        "options": [
            "А) Пересмотрю стратегию и внесу коррективы.",
            "Б) Удвою усилия, чтобы исправить ситуацию.",
            "В) Смирюсь с тем, что ситуация вышла из-под контроля."
        ]
    },
    {
        "text": "**Этап 3: Разрешение кризиса**\n6. Кризис преодолён, но последствия ещё ощущаются.",
        "options": [
            "А) Проведу анализ ситуации и разработаю план восстановления.",
            "Б) Сосредоточусь на том, что удалось спасти.",
            "В) Постараюсь забыть о произошедшем и двигаться дальше."
        ]
    },
    {
        "text": "7. Вам нужно успокоить команду после пережитого стресса.",
        "options": [
            "А) Проведу встречу, чтобы обсудить произошедшее и поддержать коллег.",
            "Б) Предложу всем отдохнуть и восстановить силы.",
            "В) Напомню, что работа должна продолжаться несмотря ни на что."
        ]
    }
]
stress_multitasking_questions = [
    {
        "text": "**Этап 1: Начало дня**\n1. Вам нужно срочно завершить отчёт, но коллега просит помочь с его задачей.",
        "options": [
            "А) Объясню, что занят, и предложу помочь позже.",
            "Б) Постараюсь сделать и то, и другое одновременно.",
            "В) Откажу коллеге, чтобы сосредоточиться на своей задаче."
        ]
    },
    {
        "text": "2. Вам звонят с важным вопросом, пока вы работаете над срочным заданием.",
        "options": [
            "А) Вежливо попрошу перезвонить позже.",
            "Б) Отвечу на звонок, но буду спешить.",
            "В) Игнорирую звонок, чтобы не отвлекаться."
        ]
    },
    {
        "text": "**Этап 2: Пик нагрузки**\n3. Вам нужно одновременно отвечать на письма, готовить презентацию и участвовать в совещании.",
        "options": [
            "А) Составлю список приоритетов и начну с самого важного.",
            "Б) Постараюсь делать всё понемногу.",
            "В) Сосредоточусь на одной задаче, игнорируя остальные."
        ]
    },
    {
        "text": "4. Вам нужно срочно завершить задачу, но вы понимаете, что не успеваете.",
        "options": [
            "А) Попрошу помощи у коллег.",
            "Б) Ускорю темп, даже если качество пострадает.",
            "В) Сообщу руководителю о задержке."
        ]
    },
    {
        "text": "5. Вокруг вас царит хаос, и вы чувствуете, что теряете контроль.",
        "options": [
            "А) Сделаю паузу, чтобы перегруппироваться.",
            "Б) Продолжу работать, несмотря на стресс.",
            "В) Попрошу кого-то другого взять на себя часть задач."
        ]
    },
    {
        "text": "**Этап 3: Завершение дня**\n6. Вы понимаете, что не успели выполнить все задачи.",
        "options": [
            "А) Составлю план на следующий день, чтобы наверстать упущенное.",
            "Б) Останусь допоздна, чтобы завершить работу.",
            "В) Оставлю всё как есть и уйду домой."
        ]
    },
    {
        "text": "7. Вы чувствуете сильную усталость после напряжённого дня.",
        "options": [
            "А) Проведу время в спокойной обстановке, чтобы восстановить силы.",
            "Б) Постараюсь отвлечься, чтобы не думать о работе.",
            "В) Продолжу работать, чтобы не отставать от графика."
        ]
    }
]
stress_conflict_questions = [
    {
        "text": "**Этап 1: Начало конфликта**\n1. Коллега начинает критиковать вашу работу при всех.",
        "options": [
            "А) Спокойно выслушаю и предложу обсудить это наедине.",
            "Б) Отвечу тем же, чтобы защитить себя.",
            "В) Промолчу, чтобы не усугублять ситуацию."
        ]
    },
    {
        "text": "2. Вы замечаете, что два коллеги конфликтуют.",
        "options": [
            "А) Предложу им поговорить наедине.",
            "Б) Сообщу руководителю.",
            "В) Постараюсь отвлечь их шуткой."
        ]
    },
    {
        "text": "**Этап 2: Эскалация конфликта**\n3. Конфликт начинает влиять на работу команды.",
        "options": [
            "А) Проведу встречу для обсуждения проблемы.",
            "Б) Попрошу руководителя вмешаться.",
            "В) Постараюсь не вмешиваться, чтобы не усугублять ситуацию."
        ]
    },
    {
        "text": "4. Вы чувствуете, что конфликт начинает влиять на ваше эмоциональное состояние.",
        "options": [
            "А) Сделаю паузу, чтобы успокоиться.",
            "Б) Постараюсь игнорировать свои эмоции.",
            "В) Выскажу всё, что думаю, чтобы снять напряжение."
        ]
    },
    {
        "text": "5. Конфликт перерастает в открытую вражду.",
        "options": [
            "А) Предложу медиацию или помощь третьей стороны.",
            "Б) Попрошу руководителя принять меры.",
            "В) Оставлю всё как есть, надеясь, что ситуация разрешится сама."
        ]
    },
    {
        "text": "**Этап 3: Разрешение конфликта**\n6. Конфликт разрешён, но атмосфера в команде осталась напряжённой.",
        "options": [
            "А) Проведу мероприятие для улучшения командного духа.",
            "Б) Предложу коллегам время на восстановление.",
            "В) Оставлю всё как есть, надеясь, что время всё исправит."
        ]
    },
    {
        "text": "7. Вы чувствуете, что конфликт оставил у вас негативные эмоции.",
        "options": [
            "А) Обсуду свои чувства с кем-то, кому доверяю.",
            "Б) Постараюсь забыть о произошедшем.",
            "В) Продолжу работать, несмотря на эмоции."
        ]
    }
]
crisis_leader_questions = [
    {
        "text": "**Этап 1: Начало кризиса**\n1. Клиент внезапно отказывается от сотрудничества. Ваши действия?",
        "options": [
            "А) Соберу команду для анализа причин и поиска альтернатив.",
            "Б) Попрошу команду работать усерднее, чтобы привлечь новых клиентов.",
            "В) Обвиню команду в недостаточной инициативе."
        ]
    },
    {
        "text": "2. Команда паникует из-за потери клиента.",
        "options": [
            "А) Проведу мотивационную встречу, чтобы вернуть уверенность.",
            "Б) Напомню о дедлайнах и необходимости сосредоточиться.",
            "В) Переложу ответственность на менеджеров."
        ]
    },
    {
        "text": "**Этап 2: Принятие решений**\n3. Нужно сократить бюджет проекта на 30%.",
        "options": [
            "А) Проведу анализ затрат и перераспределю ресурсы.",
            "Б) Урежу бонусы сотрудникам.",
            "В) Откажусь от сложных задач, чтобы сохранить бюджет."
        ]
    },
    {
        "text": "4. Ключевой сотрудник угрожает увольнением.",
        "options": [
            "А) Обсуду его претензии и предложу компромисс.",
            "Б) Предложу повышение без гарантий.",
            "В) Приму его уход как неизбежность."
        ]
    },
    {
        "text": "**Этап 3: Восстановление**\n5. Проект спасён, но команда демотивирована.",
        "options": [
            "А) Проведу ретроспективу и награжу лучших сотрудников.",
            "Б) Начну новый проект, чтобы отвлечь команду.",
            "В) Игнорирую настроения — работа важнее."
        ]
    }
]
team_builder_questions = [
    {
        "text": "**Этап 1: Знакомство с командой**\n1. В отделе есть конфликт между двумя сотрудниками.",
        "options": [
            "А) Организую медиацию для разрешения разногласий.",
            "Б) Разделю их по разным проектам.",
            "В) Проигнорирую — пусть разбираются сами."
        ]
    },
    {
        "text": "2. Один из сотрудников явно выделяется на фоне остальных.",
        "options": [
            "А) Назначу его наставником для других.",
            "Б) Попрошу его не демонстрировать превосходство.",
            "В) Оставлю всё как есть."
        ]
    },
    {
        "text": "**Этап 2: Распределение задач**\n3. Сложный проект требует участия всех сотрудников.",
        "options": [
            "А) Распределю задачи с учётом сильных сторон каждого.",
            "Б) Дам всем одинаковый объём работы.",
            "В) Поручу проект самым опытным."
        ]
    },
    {
        "text": "4. Сотрудник просит больше ответственности.",
        "options": [
            "А) Дам ему задачу с возможностью роста.",
            "Б) Пообещаю рассмотреть это позже.",
            "В) Откажу — он ещё не готов."
        ]
    },
    {
        "text": "**Этап 3: Результаты**\n5. Команда успешно завершила проект. Как вы отреагируете?",
        "options": [
            "А) Публично поблагодарю каждого и отмечу вклад.",
            "Б) Похвалю команду в общем.",
            "В) Сосредоточусь на следующих задачах."
        ]
    }
]
company_strategist_questions = [
    {
        "text": "**Этап 1: Выбор стратегии**\n1. Конкуренты предлагают аналогичный продукт дешевле.",
        "options": [
            "А) Сосредоточусь на улучшении качества и уникальности.",
            "Б) Снижу цены, чтобы удержать клиентов.",
            "В) Скопирую стратегию конкурентов."
        ]
    },
    {
        "text": "2. Инвесторы требуют быстрой прибыли.",
        "options": [
            "А) Объясню долгосрочные цели и перспективы.",
            "Б) Пообещаю прибыль в ущерб развитию.",
            "В) Откажусь от их условий."
        ]
    },
    {
        "text": "**Этап 2: Управление рисками**\n3. Новый рынок кажется перспективным, но рискованным.",
        "options": [
            "А) Запущу пилотный проект для тестирования.",
            "Б) Вложу все ресурсы в экспансию.",
            "В) Откажусь от выхода на рынок."
        ]
    },
    {
        "text": "4. Ключевой сотрудник уходит к конкурентам.",
        "options": [
            "А) Создам программу удержания талантов.",
            "Б) Усилю контроль над оставшимися.",
            "В) Найму нового сотрудника на его место."
        ]
    },
    {
        "text": "**Этап 3: Итоги**\n5. Компания достигла плановых показателей. Что дальше?",
        "options": [
            "А) Поставлю новые амбициозные цели.",
            "Б) Сосредоточусь на стабилизации.",
            "В) Продолжу действовать по текущему плану."
        ]
    }
]
innovator_leader_questions = [
    {
        "text": "**Этап 1: Внедрение изменений**\n1. Команда скептически относится к новым технологиям.",
        "options": [
            "А) Проведу обучающий семинар и покажу преимущества.",
            "Б) Объявлю о переходе на технологии как о приказе.",
            "В) Отложу изменения до лучших времён."
        ]
    },
    {
        "text": "2. Сотрудники боятся, что автоматизация лишит их работы.",
        "options": [
            "А) Объясню, как новые задачи заменят старые.",
            "Б) Уволю часть сотрудников для оптимизации.",
            "В) Прекращу внедрение автоматизации."
        ]
    },
    {
        "text": "**Этап 2: Преодоление сопротивления**\n3. Часть команды саботирует изменения.",
        "options": [
            "А) Выявлю лидеров сопротивления и найду с ними компромисс.",
            "Б) Накажу саботажников.",
            "В) Откажусь от изменений."
        ]
    },
    {
        "text": "4. Новый процесс вызывает ошибки в работе.",
        "options": [
            "А) Организую сбор обратной связи и доработаю систему.",
            "Б) Верну старые методы.",
            "В) Обвиню команду в некомпетентности."
        ]
    },
    {
        "text": "**Этап 3: Результаты**\n5. Изменения успешно внедрены. Как вы поступите?",
        "options": [
            "А) Поблагодарю команду и отмечу их вклад.",
            "Б) Сосредоточусь на следующих задачах.",
            "В) Уволю тех, кто сопротивлялся."
        ]
    }
]
leadership_exam_questions = [
    {
        "text": "**Этап 1: Этические дилеммы**\n1. Вы узнаёте, что топ-менеджер нарушает правила компании.",
        "options": [
            "А) Подниму вопрос на совете директоров.",
            "Б) Попрошу его исправиться без публичного обсуждения.",
            "В) Закрою глаза ради стабильности."
        ]
    },
    {
        "text": "2. Клиент предлагает «серую» схему работы для прибыли.",
        "options": [
            "А) Откажусь, даже если это ударит по доходам.",
            "Б) Приму предложение, но буду скрывать детали.",
            "В) Посоветуюсь с командой."
        ]
    },
    {
        "text": "**Этап 2: Управление репутацией**\n3. Компанию обвиняют в экологических нарушениях.",
        "options": [
            "А) Публично извинюсь и представлю план исправлений.",
            "Б) Нанёму PR-специалистов для маскировки проблемы.",
            "В) Отрицаю нарушения без доказательств."
        ]
    },
    {
        "text": "4. Сотрудник распространяет ложную информацию о компании.",
        "options": [
            "А) Проведу расследование и накажу виновного.",
            "Б) Уволю его без объяснений.",
            "В) Проигнорирую слухи."
        ]
    },
    {
        "text": "**Этап 3: Итоги**\n5. Репутация компании восстановлена. Ваш главный вывод?",
        "options": [
            "А) «Честность — основа долгосрочного успеха».",
            "Б) «Нужно лучше скрывать проблемы».",
            "В) «Репутация — это лишь имидж»."
        ]
    }
]
new_start_questions = [
    {
        "text": "1. В первый день вам дают доступ к сложному софту, который вы никогда не использовали. Ваши действия?",
        "options": [
            "А) Найду tutorials и начну изучать самостоятельно.",
            "Б) Попрошу коллегу показать основы.",
            "В) Скажу руководителю, что мне нужно обучение."
        ]
    },
    {
        "text": "2. Коллега объясняет процесс, но вы ничего не поняли. Как поступите?",
        "options": [
            "А) Переспрошу и попрошу примеры.",
            "Б) Кивну и разберусь позже сам.",
            "В) Сделаю вид, что понял."
        ]
    },
    {
        "text": "3. Вам дали задачу, которая не входит в ваши обязанности. Ваша реакция?",
        "options": [
            "А) Изучу тему и выполню.",
            "Б) Попрошу помощи у коллег.",
            "В) Откажусь, сославшись на некомпетентность."
        ]
    },
    {
        "text": "4. Руководитель критикует ваш подход к задаче. Что сделаете?",
        "options": [
            "А) Пересмотрю метод и внесу коррективы.",
            "Б) Объясню свою логику, но учту замечания.",
            "В) Обижусь и продолжу как было."
        ]
    },
    {
        "text": "5. Через месяц вас просят обучить новичка. Ваши действия?",
        "options": [
            "А) Составлю для него гайд и проведу инструктаж.",
            "Б) Поделюсь опытом устно.",
            "В) Передам его другому коллеге."
        ]
    }
]
tech_challenge_questions = [
    {
        "text": "1. Компания внедряет новую CRM-систему. Ваша реакция?",
        "options": [
            "А) Пройду обучение и начну использовать сразу.",
            "Б) Буду учиться постепенно, параллельно со старыми методами.",
            "В) Попрошу оставить старую систему."
        ]
    },
    {
        "text": "2. Вы столкнулись с ошибкой в новом софте. Ваши действия?",
        "options": [
            "А) Поищу решение в интернете или документации.",
            "Б) Обращусь в техподдержку.",
            "В) Вернусь к ручному расчету."
        ]
    },
    {
        "text": "3. Коллега предлагает автоматизировать вашу рутинную задачу. Как ответите?",
        "options": [
            "А) Предложу вместе написать скрипт.",
            "Б) Попрошу его помочь настроить автоматизацию.",
            "В) Откажусь — «так быстрее»."
        ]
    },
    {
        "text": "4. Вам нужно освоить инструмент за неделю. План действий?",
        "options": [
            "А) Разобью на этапы и буду учиться по 2 часа в день.",
            "Б) Пройду ускоренный курс в выходные.",
            "В) Буду разбираться по ходу работы."
        ]
    },
    {
        "text": "5. После обучения вы забыли часть материала. Что сделаете?",
        "options": [
            "А) Пересмотрю записи и повторю ключевые моменты.",
            "Б) Попрошу коллегу напомнить.",
            "В) Пропущу это, пока не понадобится."
        ]
    }
]
crisis_analyst_questions = [
    {
        "text": "1. Проект нужно завершить за 2 дня вместо 2 недель. Ваши действия?",
        "options": [
            "А) Пересмотрю приоритеты и оптимизирую процессы.",
            "Б) Попрошу команду работать сверхурочно.",
            "В) Скажу, что это невозможно."
        ]
    },
    {
        "text": "2. Ключевой сотрудник уволился в разгар проекта. Что сделаете?",
        "options": [
            "А) Быстро перераспределю задачи между командой.",
            "Б) Наня временного специалиста.",
            "В) Заморожу проект."
        ]
    },
    {
        "text": "3. Вы допустили ошибку, которая затронула клиентов. Как поступите?",
        "options": [
            "А) Признаю ошибку и предложу решение.",
            "Б) Исправлю тихо, чтобы никто не заметил.",
            "В) Переложу вину на систему."
        ]
    },
    {
        "text": "4. Руководство меняет стратегию компании. Ваша реакция?",
        "options": [
            "А) Изучу новые цели и адаптирую свои задачи.",
            "Б) Буду работать как раньше, пока не скажут иначе.",
            "В) Начну искать новую работу."
        ]
    },
    {
        "text": "5. Внезапно сломалась система, на которой строится вся работа. Ваш план?",
        "options": [
            "А) Использую резервные методы (например, Excel).",
            "Б) Подожду, пока её починят.",
            "В) Уйду домой — «всё равно ничего не сделать»."
        ]
    }
]
multicultural_code_questions = [
    {
        "text": "1. Вас переводят в офис в другой стране. Первые действия?",
        "options": [
            "А) Изучу местные традиции и язык.",
            "Б) Буду общаться только на английском.",
            "В) Останусь в своем «культурном пузыре»."
        ]
    },
    {
        "text": "2. Коллеги шутят на тему, которая вам непонятна. Как поступите?",
        "options": [
            "А) Вежливо спрошу, что значит шутка.",
            "Б) Посмеюсь вместе со всеми.",
            "В) Обижусь и промолчу."
        ]
    },
    {
        "text": "3. В новой стране рабочий график сильно отличается. Ваша реакция?",
        "options": [
            "А) Подстроюсь под новый ритм.",
            "Б) Попрошу гибкий график.",
            "В) Буду работать по своему привычному расписанию."
        ]
    },
    {
        "text": "4. Местные коллеги избегают прямых конфликтов. Как выскажете несогласие?",
        "options": [
            "А) Использую мягкие формулировки.",
            "Б) Буду прямолинеен, как привык.",
            "В) Промолчу."
        ]
    },
    {
        "text": "5. Вам подарили подарок, который противоречит вашим убеждениям. Что сделаете?",
        "options": [
            "А) Вежливо приму и поблагодарю.",
            "Б) Объясню, почему не могу его взять.",
            "В) Откажусь резко."
        ]
    }
]
skill_evolution_questions = [
    {
        "text": "1. Через год ваша профессия может измениться из-за AI. Ваши действия?",
        "options": [
            "А) Начну изучать смежные навыки уже сейчас.",
            "Б) Подожду, пока изменения станут явными.",
            "В) Не верю, что это коснётся меня."
        ]
    },
    {
        "text": "2. Компания предлагает бесплатные курсы. Выберете:",
        "options": [
            "А) Курс по новым технологиям в моей сфере.",
            "Б) Курс по soft skills.",
            "В) Откажусь — «нет времени»."
        ]
    },
    {
        "text": "3. Ваш навык устарел. Как будете действовать?",
        "options": [
            "А) Пройду переподготовку.",
            "Б) Перейду на другую должность.",
            "В) Буду работать как раньше."
        ]
    },
    {
        "text": "4. Коллега моложе вас предлагает более эффективный метод работы. Ваша реакция?",
        "options": [
            "А) Научусь у него.",
            "Б) Попробую, но вернусь к своему, если не понравится.",
            "В) Отвергну: «Старое — проверенное»."
        ]
    },
    {
        "text": "5. Через 5 лет вы видите себя:",
        "options": [
            "А) Специалистом в новой области.",
            "Б) Экспертом в текущей профессии.",
            "В) На той же позиции."
        ]
    }
]

# Главное меню
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Резюме', 'Тренировки')
    bot.send_message(message.chat.id, "Привет! У нас ты можешь создать невероятно привлекательное резюме, или потренировать свои навыки в общении с коллегами, рабочие компетенции, и многое другое.\n\n🎲 Выберите раздел:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Тренировки')
def trainings(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Мини-игры', 'Анкета', 'Назад в главное меню')
    bot.send_message(message.chat.id, "Выберите категорию: Мини-игры для развития компетенций, или пройти Тест Жизненный цикл.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'Резюме')
def create_resume(message):
    bot.send_message(message.chat.id, "Для составления привлекательного резюме ответьте на ряд вопросов.")
    start_questionnaire(message)


def start_questionnaire(message):
    user_data[message.chat.id] = {"profession": "Не указано"}  # Добавляем профессию по умолчанию
    bot.send_message(
        message.chat.id,
        "Приступим.",
        reply_markup=RESUME_KEYBOARD
    )
    ask_question2(message.chat.id, 1)

def ask_question2(chat_id, question2_number):
    questions2 = [
        "1. Какую должность или специализацию вы занимаете?",
        "2. Сколько лет опыта у вас в этой сфере?",
        "3. В какой сфере деятельности вы работаете?",
        "4. Какая ваша специализация?",
        "5. Какие ключевые технологии вы используете?",
        "6. Какие инструменты и платформы вы применяете в работе?",
        "7. Какие ваши профессиональные цели?",
        "8. Опишите ваш первый ключевой проект. Что вы делали?",
        "9. Какие результаты вы достигли в этом проекте?",
        "10. Какие технологии вы использовали в этом проекте?",
        "11. Опишите ваш второй ключевой проект. Что вы делали?",
        "12. Какие результаты вы достигли в этом проекте?",
        "13. Какие технологии вы использовали в этом проекте?",
        "14. Какие ваши сильные стороны как специалиста?",
        "15. Как вы решаете сложные задачи или проблемы в работе?",
        "16. Как вы организуете свою работу и управляете временем?",
        "17. Какие методологии и подходы вы используете в работе?",
        "18. Как вы взаимодействуете с командой и коллегами?",
        "19. Какие soft skills (универсальные навыки) вы считаете своими сильными сторонами?",
        "20. Какие ваши ключевые профессиональные достижения?",
        "21. Какое у вас образование?",
        "22. Какие сертификаты у вас есть?",
        "23. Какие курсы или тренинги вы прошли?",
        "24. Как вы следите за развитием технологий в вашей сфере?",
        "25. Почему вы подходите компании?",
        "26. Что мотивирует вас в работе?",
        "27. Как вы справляетесь с изменениями или неожиданными вызовами?",
        "28. Какие у вас есть примеры успешного внедрения новых идей или технологий?",
        "29. Как вы оцениваете свои результаты и прогресс в работе?",
        "30. Ваши Фамилия и Имя",
        "31. Контактные данные(Email, телефон)."
    ]
    if question2_number <= len(questions2):
        bot.send_message(
            chat_id, 
            questions2[question2_number - 1],
            reply_markup=RESUME_KEYBOARD  # Используем статическую клавиатуру
        )
        bot.register_next_step_handler_by_chat_id(
            chat_id, 
            lambda message: handle_answer2(message, question2_number)
        )
    else:
        generate_resume(chat_id)
        
def handle_answer2(message, question2_number):
    chat_id = message.chat.id
    if message.text == 'Назад':
        ask_question2(chat_id, question2_number - 1)
        return
    elif message.text == 'Отменить опросник':
        if chat_id in user_data:
            del user_data[chat_id]
        start(message)
        return
    elif chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id][f"q{question2_number}"] = message.text
    ask_question2(chat_id, question2_number + 1)

def generate_resume(chat_id):
    try:
        data = user_data.get(chat_id, {})  # Получаем данные, если они есть
        if not data:
            bot.send_message(chat_id, "Ошибка: данные не найдены. Пожалуйста, начните опросник заново.")
            return

        profession = data.get("profession", "Не указано")  # Профессия по умолчанию

        resume = f"""
### 1. Общая информация  
Я — {data.get('q1', 'Не указано')} с опытом работы в сфере {data.get('q3', 'Не указано')} более {data.get('q2', 'Не указано')}. 
Моя специализация — {data.get('q4', 'Не указано')}, и я активно применяю такие технологии, как {data.get('q5', 'Не указано')}, 
а также работаю с инструментами и платформами, такими как {data.get('q6', 'Не указано')}. 
Моя профессиональная цель — {data.get('q7', 'Не указано')}, и я стремлюсь к постоянному развитию в своей области.

### 2. Профессиональный опыт  
- Проект 1:
  - Задача, которую я выполнял: {data.get('q8', 'Не указано')}  
  - Результаты: {data.get('q9', 'Не указано')}  
  - Используемые технологии: {data.get('q10', 'Не указано')}

- Проект 2:
  - Задача, которую я выполнял: {data.get('q11', 'Не указано')}  
  - Результаты: {data.get('q12', 'Не указано')}  
  - Используемые технологии: {data.get('q13', 'Не указано')}

### 3. Ключевые навыки  
- Технические навыки: {data.get('q5', 'Не указано')}, {data.get('q17', 'Не указано')}  
- Методологии и подходы: {data.get('q17', 'Не указано')}, {data.get('q18', 'Не указано')}  
- Soft skills: {data.get('q19', 'Не указано')}, {data.get('q26', 'Не указано')}  

### 4. Достижения  
- {data.get('q20', 'Не указано')}  
- {data.get('q9', 'Не указано')}  
- {data.get('q12', 'Не указано')}  

### 5. Образование и сертификаты  
- Образование: {data.get('q21', 'Не указано')}  
- Сертификаты: {data.get('q22', 'Не указано')}  
- Курсы: {data.get('q23', 'Не указано')}  

### 6. Почему я подхожу вашей компании?  
- {data.get('q25', 'Не указано')}  
- {data.get('q26', 'Не указано')}  

### 7. Контакты  
- {data.get('q30', 'Не указано')}  
- {data.get('q31', 'Не указано')}  
        """

        # Сохраняем резюме в файл
        filename = f"resume_{chat_id}.txt"
        with open(filename, "w", encoding="utf-8") as file:
            file.write(resume)

        # Отправляем файл пользователю
        with open(filename, "rb") as file:
            bot.send_document(chat_id, file)

        # Уведомляем пользователя
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('Назад в главное меню')
        bot.send_message(chat_id, "Ваше резюме готово! 🎉", reply_markup=markup)

    except Exception as e:
        # Логируем ошибку
        print(f"Ошибка при генерации резюме: {e}")
        bot.send_message(chat_id, "Произошла ошибка при создании резюме. Пожалуйста, попробуйте снова.")
    
@bot.message_handler(func=lambda m: m.text == 'Назад в главное меню')
def menu2(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Резюме', 'Тренировки')
    start(message)
    
@bot.message_handler(func=lambda m: m.text == 'Мини-игры')
def mini_games(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Слабые и сильные компетенции', 'Soft skills', 'Оценка культурного соответствия', 'Проверка на стрессоустойчивость', 'Оценка лидерских качеств', 'Проверка обучаемости и адаптивности', 'Назад в тренировки')
    bot.send_message(message.chat.id, "🎮 Выберите игру:", reply_markup=markup)
# endregion

# region Compass Game
@bot.message_handler(func=lambda m: m.text == 'Слабые и сильные компетенции')
def competitions_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Компас компетенций', 'Лабиринт решений', 'Карьерный квест', 'Карьерная стратегия', 'Офисные хроники', 'Назад в мини-игры')
    bot.send_message(message.chat.id, "🔍 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Soft skills')
def soft_skills_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Кризисный менеджер', 'Переговоры на высшем уровне', 'Командный дух', 'Командный баланс', 'Лидерский путь', 'Назад в мини-игры')  # Добавлена кнопка для новой игры
    bot.send_message(message.chat.id, "🧠 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Оценка культурного соответствия')
def culture_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Культурный код компании', 'Глобальный культурный микс', 'Культурный детектив', 'Культурный баланс', 'Культурный эксперт', 'Назад в мини-игры')
    bot.send_message(message.chat.id, "🔍 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Проверка на стрессоустойчивость')
def stress_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Стресс-тест: Экзамен на выживание', 'Стресс-тест: Переговоры под давлением', 'Стресс-тест: Экстренная ситуация', 'Стресс-тест: Многозадачность', 'Стресс-тест: Конфликт на работе', 'Назад в мини-игры')
    bot.send_message(message.chat.id, "🔍 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Оценка лидерских качеств')
def lider_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Лидер в кризисе', 'Строитель команды', 'Стратег компании', 'Лидер-новатор', 'Экзамен на лидерство', 'Назад в мини-игры')
    bot.send_message(message.chat.id, "🔍 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'Проверка обучаемости и адаптивности')
def learn_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('Новый старт', 'Технологический вызов', 'Кризисный аналитик', 'Мультикультурный код', 'Эволюция навыков', 'Назад в мини-игры')
    bot.send_message(message.chat.id, "🔍 Выберите игру:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "Анкета")
def start_questionnaire2(message):
    user_responses[message.chat.id] = {}
    bot.send_message(message.chat.id, "Эта анкета — ваш помощник в поиске вдохновения и ясности. Она создана, чтобы помочь вам лучше понять свои профессиональные цели, привычки и ценности, а также увидеть возможности для роста. 50 вопросов затронут важные аспекты вашей жизни, работы и устремлений. Отвечайте искренне — это шанс взглянуть на себя со стороны, осознать, где вы сейчас, и найти силы для новых шагов. Пусть ваши ответы станут началом изменений, к которым вы стремитесь. Анкета длинная, но ее стоит пройти.")  # Ваше длинное описание
    time.sleep(1)
    ask_question3(message.chat.id, 0)

def ask_question3(chat_id, question3_index):
    if question3_index < len(questions3):
        question3 = questions3[question3_index]
        # Создание клавиатуры с кнопками "Вариант А", "Вариант Б", "Вариант В", "Вариант Г"
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('Вариант А', 'Вариант Б', 'Вариант В', 'Вариант Г')
        
        # Отправка вопроса и вариантов ответа
        bot.send_message(
            chat_id,
            f"{question3['text']}\n\n" + "\n".join(question3['options']),
            reply_markup=markup
        )
        # Регистрация следующего шага для обработки ответа
        bot.register_next_step_handler_by_chat_id(chat_id, lambda m: handle_answer3(m, question3_index))
    else:
        # Если вопросы закончились, сохраняем ответы
        save_responses(chat_id)

def handle_answer3(message, question3_index):
    chat_id = message.chat.id
    # Получаем текст выбранной кнопки (например, "Вариант А")
    selected_option = message.text

    # Определяем, какой ответ соответствует выбранной кнопке
    question3 = questions3[question3_index]
    options = question3['options']
    if selected_option == "Вариант А":
        answer3_text = options[0]
    elif selected_option == "Вариант Б":
        answer3_text = options[1]
    elif selected_option == "Вариант В":
        answer3_text = options[2]
    elif selected_option == "Вариант Г":
        answer3_text = options[3]
    else:
        answer3_text = "Неизвестный ответ"

    # Сохраняем текст ответа
    user_responses[chat_id][question3_index] = answer3_text

    # Переходим к следующему вопросу
    ask_question3(chat_id, question3_index + 1)

def save_responses(chat_id):
    # Сохранение в файл
    filename = f"анкета_{chat_id}.txt"
    with open(filename, "w", encoding="utf-8") as file:
        for i, question3 in enumerate(questions3):
            file.write(f"{question3}\nОтвет: {user_responses[chat_id][i]}\n\n")
    
    # Отправка файла и начало обратной связи
    with open(filename, "rb") as file:
        bot.send_document(chat_id, file)
    
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "Анкета завершена. Нажмите 'Далее', чтобы получить обратную связь.", reply_markup=markup)
    
    # Инициализация обратной связи
    feedback_steps[chat_id] = 0
    send_next_feedback(chat_id)

def send_next_feedback(chat_id):
    step = feedback_steps.get(chat_id, 0)
    messages = [
        "Спасибо за ответы! После прохождения анкеты проанализируйте ответы. Если большинство ответов А и Б - вы на пути к балансу. Если преобладают В и Г - задумайтесь, что мешает вам действовать.",
        "Следующие шаги:\n Выберите 3 вопроса, ответы на которые вас расстроили, и начните менять эти сферы.\n Запишите одну маленькую цель на неделю (например: 10 минут спорта в день, отложить 5% дохода).\n Поделитесь анкетой с тем, кто вас поддержит. У вас есть всё, чтобы стать лучшей версией себя. Действуйте! 🌟",
        "Надеемся, эта анкета помогла вам задуматься о своих возможностях и вдохновила на новые шаги к успеху. Помните: даже маленькие действия могут привести к большим изменениям! 🚀",
        "Пожалуйста, сохраните результаты анкеты — они станут вашей отправной точкой. Выберите три конкретных шага, которые вы готовы сделать на этой неделе, чтобы приблизиться к своим целям. Через неделю вернитесь к анкете, выберите следующие три шага и продолжайте движение. А через месяц пройдите тест заново: сравните результаты, чтобы увидеть, как изменились ваши мысли, приоритеты и действия. Это ваш путь к осознанным изменениям — шаг за шагом."
    ]

    if step < len(messages):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("Далее"))
        bot.send_message(chat_id, messages[step], reply_markup=markup)
        feedback_steps[chat_id] += 1
    else:
        # После последнего сообщения показываем главное меню и кнопку напоминания
        del feedback_steps[chat_id]
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("Назад в главное меню"))
        markup.add(telebot.types.KeyboardButton("Включить напоминание через месяц"))
        bot.send_message(chat_id, "Вы можете вернуться в главное меню или включить напоминание через месяц.", reply_markup=markup)

# Обработчик кнопки "Далее"
@bot.message_handler(func=lambda message: message.text == "Далее")
def handle_next(message):
    chat_id = message.chat.id
    send_next_feedback(chat_id)

# Обработчик кнопки "Включить напоминание через месяц"
@bot.message_handler(func=lambda message: message.text == "Включить напоминание через месяц")
def set_reminder(message):
    chat_id = message.chat.id
    reminder_time = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT OR REPLACE INTO reminders (chat_id, reminder_time) VALUES (?, ?)', (chat_id, reminder_time))
    conn.commit()
    bot.send_message(chat_id, "Я напомню пройти анкету через месяц. Если будешь следовать рекомендациям, после повторного прохождения увидишь прогресс!")

# Обработчик кнопки "Главное меню"
@bot.message_handler(func=lambda message: message.text == "Назад в главное меню")
def back_to_menu2(message):
    start(message)
    # Очистка состояния
    if message.chat.id in feedback_steps:
        del feedback_steps[message.chat.id]
    send_welcome(message)
        
@bot.message_handler(func=lambda m: m.text == 'Компас компетенций')
def start_compass(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'compass',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Мини-игры', 'name': 'Компас компетенций'}
    }
    
    bot.send_message(
        chat_id,
        "**🔭 Компас компетенций**\n\n"
        "Определите свои сильные и слабые стороны!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_compass_question(message)

def send_compass_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'compass': return

    index = data['question_index']
    if index >= len(compass_questions):
        finish_game(chat_id)
        return

    question = compass_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )
# endregion

# region Labyrinth Game
@bot.message_handler(func=lambda m: m.text == 'Лабиринт решений')
def start_labyrinth(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'labyrinth',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Мини-игры', 'name': 'Лабиринт решений'}
    }
    
    bot.send_message(
        chat_id,
        "**🌀 Лабиринт решений**\n\n"
        "Научитесь принимать решения в условиях неопределённости!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_labyrinth_question(message)

def send_labyrinth_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'labyrinth': return

    index = data['question_index']
    if index >= len(labyrinth_questions):
        finish_game(chat_id)
        return

    question = labyrinth_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )
# endregion
@bot.message_handler(func=lambda m: m.text == 'Карьерный квест')
def start_career_quest(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'career_quest',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Мини-игры', 'name': 'Карьерный квест'}
    }
    
    bot.send_message(
        chat_id,
        "**🗺️ Карьерный квест**\n\n"
        "Проложите свой путь к профессиональному успеху!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_career_question(message)

def send_career_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'career_quest': return

    index = data['question_index']
    if index >= len(career_quest_questions):
        finish_game(chat_id)
        return

    question = career_quest_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Карьерная стратегия')
def start_career_strategy(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'career_strategy',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Мини-игры', 'name': 'Карьерная стратегия'}
    }
    8
    bot.send_message(
        chat_id,
        "**📊 Карьерная стратегия**\n\n"
        "Определите свои управленческие и стратегические навыки через рабочие кейсы!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_career_strategy_question(message)

def send_career_strategy_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'career_strategy': return

    index = data['question_index']
    if index >= len(career_strategy_questions):
        finish_game(chat_id)
        return

    question = career_strategy_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Офисные хроники')
def start_office_chronicles(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'office_chronicles',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Мини-игры', 'name': 'Офисные хроники'}
    }
    
    bot.send_message(
        chat_id,
        "**📂 Офисные хроники**\n\n"
        "Пройти путь от стажера до руководителя, принимая решения, которые влияют на карьеру!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_office_chronicles_question(message)

def send_office_chronicles_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'office_chronicles': return

    index = data['question_index']
    if index >= len(office_chronicles_questions):
        finish_game(chat_id)
        return

    question = office_chronicles_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Кризисный менеджер')
def start_crisis_manager(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'crisis_manager',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Кризисный менеджер'}
    }
    
    bot.send_message(
        chat_id,
        "**🔥 Кризисный менеджер**\n\n"
        "Оцените свои навыки стрессоустойчивости и принятия решений в условиях неопределенности!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_crisis_manager_question(message)

def send_crisis_manager_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'crisis_manager': return

    index = data['question_index']
    if index >= len(crisis_manager_questions):
        finish_game(chat_id)
        return

    question = crisis_manager_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Переговоры на высшем уровне')
def start_negotiations(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'negotiations',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Переговоры на высшем уровне'}
    }
    
    bot.send_message(
        chat_id,
        "**💼 Переговоры на высшем уровне**\n\n"
        "Оцените свои навыки ведения переговоров, убеждения и работы с возражениями!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_negotiations_question(message)

def send_negotiations_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'negotiations': return

    index = data['question_index']
    if index >= len(negotiations_questions):
        finish_game(chat_id)
        return

    question = negotiations_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )
    
@bot.message_handler(func=lambda m: m.text == 'Командный дух')
def start_team_spirit(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'team_spirit',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Командный дух'}
    }
    
    bot.send_message(
        chat_id,
        "**🤝 Командный дух**\n\n"
        "Оцените свои навыки работы в команде, лидерства и разрешения конфликтов!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_team_spirit_question(message)

def send_team_spirit_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'team_spirit': return

    index = data['question_index']
    if index >= len(team_spirit_questions):
        finish_game(chat_id)
        return

    question = team_spirit_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Командный баланс')
def start_team_balance(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'team_balance',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Командный баланс'}
    }
    
    bot.send_message(
        chat_id,
        "**⚖️ Командный баланс**\n\n"
        "Оцените свои навыки работы в команде, эмоционального интеллекта и коммуникации!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_team_balance_question(message)

def send_team_balance_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'team_balance': return

    index = data['question_index']
    if index >= len(team_balance_questions):
        finish_game(chat_id)
        return

    question = team_balance_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Лидерский путь')
def start_leadership_path(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'leadership_path',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Лидерский путь'}
    }
    
    bot.send_message(
        chat_id,
        "**🌟 Лидерский путь**\n\n"
        "Оцените свои навыки лидерства, принятия решений и мотивации команды!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_leadership_question(message)

def send_leadership_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'leadership_path': return

    index = data['question_index']
    if index >= len(leadership_path_questions):
        finish_game(chat_id)
        return

    question = leadership_path_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Культурный код компании')
def start_company_culture(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'company_culture',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Культурный код компании'}
    }
    
    bot.send_message(
        chat_id,
        "**🏢 Культурный код компании**\n\n"
        "Оцените, насколько ваши ценности и поведение соответствуют корпоративной культуре!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_company_culture_question(message)

def send_company_culture_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'company_culture': return

    index = data['question_index']
    if index >= len(company_culture_questions):
        finish_game(chat_id)
        return

    question = company_culture_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Глобальный культурный микс')
def start_global_culture_mix(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'global_culture_mix',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Глобальный культурный микс'}
    }
    
    bot.send_message(
        chat_id,
        "**🌍 Глобальный культурный микс**\n\n"
        "Оцените, насколько вы готовы работать в мультикультурной среде!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_global_culture_mix_question(message)

def send_global_culture_mix_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'global_culture_mix': return

    index = data['question_index']
    if index >= len(global_culture_mix_questions):
        finish_game(chat_id)
        return

    question = global_culture_mix_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Культурный детектив')
def start_cultural_detective(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'cultural_detective',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Культурный детектив'}
    }
    
    bot.send_message(
        chat_id,
        "**🕵️ Культурный детектив**\n\n"
        "Оцените, насколько вы умеете «читать» культурные коды и адаптироваться к ним!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_cultural_detective_question(message)

def send_cultural_detective_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'cultural_detective': return

    index = data['question_index']
    if index >= len(cultural_detective_questions):
        finish_game(chat_id)
        return

    question = cultural_detective_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Культурный баланс')
def start_cultural_balance(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'cultural_balance',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Культурный баланс'}
    }
    
    bot.send_message(
        chat_id,
        "**⚖️ Культурный баланс**\n\n"
        "Оцените, насколько вы умеете сохранять баланс между своими ценностями и нормами компании!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_cultural_balance_question(message)

def send_cultural_balance_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'cultural_balance': return

    index = data['question_index']
    if index >= len(cultural_balance_questions):
        finish_game(chat_id)
        return

    question = cultural_balance_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Культурный эксперт')
def start_cultural_expert(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'cultural_expert',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Культурный эксперт'}
    }
    
    bot.send_message(
        chat_id,
        "**🌐 Культурный эксперт**\n\n"
        "Оцените, насколько вы готовы стать «культурным мостом» между разными группами!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_cultural_expert_question(message)

def send_cultural_expert_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'cultural_expert': return

    index = data['question_index']
    if index >= len(cultural_expert_questions):
        finish_game(chat_id)
        return

    question = cultural_expert_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стресс-тест: Экзамен на выживание')
def start_stress_test(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'stress_test',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стресс-тест: Экзамен на выживание'}
    }
    
    bot.send_message(
        chat_id,
        "**🔥 Стресс-тест: Экзамен на выживание**\n\n"
        "Оцените свои навыки стрессоустойчивости и принятия решений в условиях давления!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_stress_test_question(message)

def send_stress_test_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'stress_test': return

    index = data['question_index']
    if index >= len(stress_test_questions):
        finish_game(chat_id)
        return

    question = stress_test_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стресс-тест: Переговоры под давлением')
def start_stress_negotiations(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'stress_negotiations',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стресс-тест: Переговоры под давлением'}
    }
    
    bot.send_message(
        chat_id,
        "**💼 Стресс-тест: Переговоры под давлением**\n\n"
        "Оцените свои навыки ведения переговоров в стрессовых условиях!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_stress_negotiations_question(message)

def send_stress_negotiations_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'stress_negotiations': return

    index = data['question_index']
    if index >= len(stress_negotiations_questions):
        finish_game(chat_id)
        return

    question = stress_negotiations_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стресс-тест: Экстренная ситуация')
def start_emergency_situation(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'stress_emergency',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стресс-тест: Экстренная ситуация'}
    }
    
    bot.send_message(
        chat_id,
        "**🚨 Стресс-тест: Экстренная ситуация**\n\n"
        "Оцените свои навыки управления кризисами в экстремальных условиях!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_emergency_question(message)

def send_emergency_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'stress_emergency': return

    index = data['question_index']
    if index >= len(stress_emergency_questions):
        finish_game(chat_id)
        return

    question = stress_emergency_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стресс-тест: Многозадачность')
def start_multitasking_test(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'stress_multitasking',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стресс-тест: Многозадачность'}
    }
    
    bot.send_message(
        chat_id,
        "**📚 Стресс-тест: Многозадачность**\n\n"
        "Оцените свои навыки работы в условиях многозадачности и стресса!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_multitasking_question(message)

def send_multitasking_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'stress_multitasking': return

    index = data['question_index']
    if index >= len(stress_multitasking_questions):
        finish_game(chat_id)
        return

    question = stress_multitasking_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стресс-тест: Конфликт на работе')
def start_work_conflict(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'stress_conflict',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стресс-тест: Конфликт на работе'}
    }
    
    bot.send_message(
        chat_id,
        "**⚔️ Стресс-тест: Конфликт на работе**\n\n"
        "Оцените свои навыки управления конфликтами и эмоционального интеллекта!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_conflict_question(message)

def send_conflict_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'stress_conflict': return

    index = data['question_index']
    if index >= len(stress_conflict_questions):
        finish_game(chat_id)
        return

    question = stress_conflict_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Лидер в кризисе')
def start_crisis_leader(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'crisis_leader',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Лидер в кризисе'}
    }
    
    bot.send_message(
        chat_id,
        "**🔥 Лидер в кризисе**\n\n"
        "Оцените свои навыки кризисного лидерства и управления командой в стрессовых условиях!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_crisis_leader_question(message)

def send_crisis_leader_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'crisis_leader': return

    index = data['question_index']
    if index >= len(crisis_leader_questions):
        finish_game(chat_id)
        return

    question = crisis_leader_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Строитель команды')
def start_team_builder(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'team_builder',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Строитель команды'}
    }
    
    bot.send_message(
        chat_id,
        "**👥 Строитель команды**\n\n"
        "Создайте сплочённую команду и раскройте потенциал сотрудников!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_team_builder_question(message)

def send_team_builder_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'team_builder': return

    index = data['question_index']
    if index >= len(team_builder_questions):
        finish_game(chat_id)
        return

    question = team_builder_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Стратег компании')
def start_company_strategist(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'company_strategist',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Стратег компании'}
    }
    
    bot.send_message(
        chat_id,
        "**🎯 Стратег компании**\n\n"
        "Определите стратегический путь развития компании в условиях конкуренции!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_strategist_question(message)

def send_strategist_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'company_strategist': return

    index = data['question_index']
    if index >= len(company_strategist_questions):
        finish_game(chat_id)
        return

    question = company_strategist_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Лидер-новатор')
def start_innovator_leader(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'innovator_leader',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Лидер-новатор'}
    }
    
    bot.send_message(
        chat_id,
        "**🚀 Лидер-новатор**\n\n"
        "Внедрите инновации и преодолейте сопротивление команды!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_innovator_question(message)

def send_innovator_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'innovator_leader': return

    index = data['question_index']
    if index >= len(innovator_leader_questions):
        finish_game(chat_id)
        return

    question = innovator_leader_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Экзамен на лидерство')
def start_leadership_exam(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'leadership_exam',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Экзамен на лидерство'}
    }
    
    bot.send_message(
        chat_id,
        "**📜 Экзамен на лидерство**\n\n"
        "Решите моральные дилеммы и сохраните репутацию компании!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_leadership_question(message)

def send_leadership_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'leadership_exam': return

    index = data['question_index']
    if index >= len(leadership_exam_questions):
        finish_game(chat_id)
        return

    question = leadership_exam_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Новый старт')
def start_new_start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'new_start',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Новый старт'}
    }
    
    bot.send_message(
        chat_id,
        "**🌱 Новый старт**\n\n"
        "Проверьте свою адаптивность на новой должности!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_new_start_question(message)

def send_new_start_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'new_start': return

    index = data['question_index']
    if index >= len(new_start_questions):
        finish_game(chat_id)
        return

    question = new_start_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Технологический вызов')
def start_tech_challenge(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'tech_challenge',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Технологический вызов'}
    }
    
    bot.send_message(
        chat_id,
        "**💻 Технологический вызов**\n\n"
        "Проверьте свои навыки освоения новых технологий!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_tech_challenge_question(message)

def send_tech_challenge_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'tech_challenge': return

    index = data['question_index']
    if index >= len(tech_challenge_questions):
        finish_game(chat_id)
        return

    question = tech_challenge_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Кризисный аналитик')
def start_crisis_analyst(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'crisis_analyst',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Кризисный аналитик'}
    }
    
    bot.send_message(
        chat_id,
        "**🔥 Кризисный аналитик**\n\n"
        "Проверьте, как вы действуете в нестандартных ситуациях!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_crisis_analyst_question(message)

def send_crisis_analyst_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'crisis_analyst': return

    index = data['question_index']
    if index >= len(crisis_analyst_questions):
        finish_game(chat_id)
        return

    question = crisis_analyst_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Мультикультурный код')
def start_multicultural_code(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'multicultural_code',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Мультикультурный код'}
    }
    
    bot.send_message(
        chat_id,
        "**🌍 Мультикультурный код**\n\n"
        "Проверьте свою адаптивность в международной среде!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_multicultural_code_question(message)

def send_multicultural_code_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'multicultural_code': return

    index = data['question_index']
    if index >= len(multicultural_code_questions):
        finish_game(chat_id)
        return

    question = multicultural_code_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == 'Эволюция навыков')
def start_skill_evolution(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'game_type': 'skill_evolution',
        'score': 0,
        'question_index': 0,
        'current_game': {'category': 'Soft skills', 'name': 'Эволюция навыков'}
    }
    
    bot.send_message(
        chat_id,
        "**🚀 Эволюция навыков**\n\n"
        "Оцените, как вы развиваетесь в долгосрочной перспективе!\n"
        "Игра начнется через 2 секунды...",
        parse_mode="Markdown"
    )
    time.sleep(2)
    send_skill_evolution_question(message)

def send_skill_evolution_question(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data or data['game_type'] != 'skill_evolution': return

    index = data['question_index']
    if index >= len(skill_evolution_questions):
        finish_game(chat_id)
        return

    question = skill_evolution_questions[index]
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('Вариант А', 'Вариант Б', 'Вариант В')
    
    bot.send_message(
        chat_id,
        f"{question['text']}\n\n" + "\n".join(question['options']),
        reply_markup=markup
    )

# region Common Logic
@bot.message_handler(func=lambda m: m.text in ['Вариант А', 'Вариант Б', 'Вариант В'])
def handle_answer(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data: return

    # Начисление баллов
    if message.text == 'Вариант А': 
        data['score'] += 2
    elif message.text == 'Вариант Б': 
        data['score'] += 1

    data['question_index'] += 1
    
    # Отправка следующего вопроса
    if data['game_type'] == 'compass':
        send_compass_question(message)
    elif data['game_type'] == 'labyrinth':
        send_labyrinth_question(message)
    elif data['game_type'] == 'career_quest':
        send_career_question(message)
    elif data['game_type'] == 'career_strategy':
        send_career_strategy_question(message)
    elif data['game_type'] == 'office_chronicles':  # Добавлено для новой игры
        send_office_chronicles_question(message)
    elif data['game_type'] == 'crisis_manager':  # Добавлено для новой игры
        send_crisis_manager_question(message)
    elif data['game_type'] == 'negotiations':  # Добавлено для новой игры
        send_negotiations_question(message)
    elif data['game_type'] == 'team_spirit':  # Добавлено для новой игры
        send_team_spirit_question(message)
    elif data['game_type'] == 'team_balance':  # Добавлено для новой игры
        send_team_balance_question(message)
    elif data['game_type'] == 'leadership_path':  # Добавляем проверку
        send_leadership_question(message)
    elif data['game_type'] == 'company_culture':  # Добавлено для новой игры
        send_company_culture_question(message)
    elif data['game_type'] == 'global_culture_mix':  # Добавлено для новой игры
        send_global_culture_mix_question(message)
    elif data['game_type'] == 'cultural_detective':
        send_cultural_detective_question(message)
    elif data['game_type'] == 'cultural_balance':
        send_cultural_balance_question(message)
    elif data['game_type'] == 'cultural_expert':
        send_cultural_expert_question(message)
    elif data['game_type'] == 'stress_test':
        send_stress_test_question(message)
    elif data['game_type'] == 'stress_negotiations':
        send_stress_negotiations_question(message)
    elif data['game_type'] == 'stress_emergency':
        send_emergency_question(message)
    elif data['game_type'] == 'stress_multitasking':
        send_multitasking_question(message)
    elif data['game_type'] == 'stress_conflict':
        send_conflict_question(message)
    elif data['game_type'] == 'crisis_leader':
        send_crisis_leader_question(message)
    elif data['game_type'] == 'team_builder':
        send_team_builder_question(message)
    elif data['game_type'] == 'company_strategist':
        send_strategist_question(message)
    elif data['game_type'] == 'innovator_leader':
        send_innovator_question(message)
    elif data['game_type'] == 'leadership_exam':
        send_leadership_question(message)
    elif data['game_type'] == 'new_start':
        send_new_start_question(message)
    elif data['game_type'] == 'tech_challenge':
        send_tech_challenge_question(message)
    elif data['game_type'] == 'crisis_analyst':
        send_crisis_analyst_question(message)
    elif data['game_type'] == 'multicultural_code':
        send_multicultural_code_question(message)
    elif data['game_type'] == 'skill_evolution':
        send_skill_evolution_question(message)

def finish_game(chat_id):
    data = user_data.get(chat_id)
    if not data: return

    # Определение результата
    if data['game_type'] == 'compass':
        if data['score'] >= 15:
            result = "15-20 баллов: Сильные компетенции в адаптивности и лидерстве"
        elif data['score'] >= 8:
            result = "8-14 баллов: Надежный сотрудник с балансом навыков"
        else:
            result = "0-7 баллов: Предпочтение стабильности и комфорту"
    elif data['game_type'] == 'labyrinth':
        if data['score'] >= 7:
            result = "7-10 баллов: Стратегический подход и умение работать в команде. Рекомендации: анализируйте, какие решения привели Вас к успеху, а какие - к трудностям. Используйте этот анализ в реальной работе, чтобы улучшить свои навыки принятия решений."
        elif data['score'] >= 4:
            result = "4-6 баллов: Прагматизм и ориентация на результат. Рекомендации: анализируйте, какие решения привели Вас к успеху, а какие - к трудностям. Используйте этот анализ в реальной работе, чтобы улучшить свои навыки принятия решений."
        else:
            result = "0-3 баллов: Осторожность и избегание рисков. Рекомендации: анализируйте, какие решения привели Вас к успеху, а какие - к трудностям. Используйте этот анализ в реальной работе, чтобы улучшить свои навыки принятия решений."
    elif data['game_type'] == 'career_quest':
        if data['score'] >= 14:
            result = "14-18 баллов: Вы стремитесь к карьерному росту и готовы брать на себя ответственность, умеете решать конфликты конструктивно. Вы эффективно управляете проектами и умеете адаптироваться."
        elif data['score'] >= 9:
            result = "9-13 баллов: Вы цените стабильность и личное развитие. Стараетесь избегать конфликтов, но иногда пассивны; стараетесь находить компромиссы, но иногда не хватает решительности."
        else:
            result = "0-8 баллов: Вы ищете новые вызовы и готовы к риску, но при этом вам стоит развивать уверенность и навыки коммуникации. Вам стоит уделять больше внимания планированию и балансу между скоростью и качеством."
    elif data['game_type'] == 'career_strategy':
        if data['score'] >= 12:
            result = "12-16 баллов: Вы — лидер, умеющий работать с людьми, но иногда упускаете детали."
        elif data['score'] >= 8:
            result = "8-11 баллов: Вы прагматичны, но рискуете потерять доверие команды."
        else:
            result = "0-7 баллов: Вы ответственны, но склонны к микроменеджменту."
    elif data['game_type'] == 'office_chronicles':  # Добавлен блок для Офисных хроник
        if data['score'] >= 9:
            result = "9-12 баллов: Вы стремитесь к совершенству, но рискуете выгореть."
        elif data['score'] >= 6:
            result = "6-8 баллов: Вы гибки, но иногда не хватает стратегического видения."
        else:
            result = "0-5 баллов: Вы осторожны, но можете упускать возможности."
    elif data['game_type'] == 'crisis_manager':  # Добавлен блок для Кризисного менеджера
        if data['score'] >= 6:
            result = "6-8 баллов: Вы — стратег, умеющий действовать системно даже в кризисных ситуациях."
        elif data['score'] >= 3:
            result = "3-5 баллов: Вы — решительный лидер, но иногда рискуете упустить долгосрочные последствия."
        else:
            result = "0-2 баллов: Вы осторожны, но вам может не хватать инициативности."
    elif data['game_type'] == 'negotiations':  # Добавлен блок для Переговоров на высшем уровне
        if data['score'] >= 6:
            result = "6-8 баллов: Вы — мастер переговоров, умеющий находить баланс между интересами сторон."
        elif data['score'] >= 3:
            result = "3-5 баллов: Вы — уверенный переговорщик, но иногда рискуете испортить отношения."
        else:
            result = "0-2 баллов: Вы — гибкий и дипломатичный, но можете упускать выгодные возможности."
    elif data['game_type'] == 'team_spirit':  # Добавлен блок для Командного духа
        if data['score'] >= 6:
            result = "6-8 баллов: Вы — командный игрок, умеющий создавать гармонию в коллективе."
        elif data['score'] >= 3:
            result = "3-5 баллов: Вы — лидер, который умеет мотивировать и вдохновлять."
        else:
            result = "0-2 баллов: Вы — организатор, способный улучшать процессы."
    elif data['game_type'] == 'team_balance':  # Добавлен блок для Командного баланса
        if data['score'] >= 12:
            result = "12–16 баллов: Вы — командный игрок, умеющий находить баланс между своими и чужими интересами."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь избегать конфликтов, но иногда теряете инициативу."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки коммуникации и эмоционального интеллекта."
    elif data['game_type'] == 'leadership_path':  # Новый блок
        if data['score'] >= 12:
            result = "12–16 баллов: Вы — вдохновляющий лидер, умеющий мотивировать и поддерживать команду."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь быть справедливым, но иногда не хватает решительности."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки эмпатии и делегирования."
    elif data['game_type'] == 'company_culture':  # Новый блок
        if data['score'] >= 10:
            result = "10–12 баллов: Вы идеально вписываетесь в культуру компании."
        elif data['score'] >= 6:
            result = "6–9 баллов: Вы близки к культуре, но есть зоны для адаптации."
        else:
            result = "0–5 баллов: Вам стоит пересмотреть свои ценности или выбрать другую компанию."
    elif data['game_type'] == 'global_culture_mix':  # Новый блок
        if data['score'] >= 8:
            result = "8–10 баллов: Вы легко адаптируетесь к мультикультурной среде."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда испытываете трудности."
        else:
            result = "0–3 балла: Вам стоит развивать культурную чувствительность."
    elif data['game_type'] == 'cultural_detective':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы отлично «читаете» культурные коды."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда ошибаетесь."
        else:
            result = "0–3 балла: Вам стоит развивать наблюдательность и гибкость."
    elif data['game_type'] == 'cultural_balance':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы умеете сохранять баланс между своими ценностями и нормами компании."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда идёте на компромиссы."
        else:
            result = "0–3 балла: Вам стоит больше отстаивать свои принципы."
    elif data['game_type'] == 'cultural_expert':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы — культурный эксперт, способный объединять людей."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда ошибаетесь."
        else:
            result = "0–3 балла: Вам стоит развивать эмпатию и культурную осведомлённость."
    elif data['game_type'] == 'stress_test':
        if data['score'] >= 12:
            result = "12–16 баллов: Вы отлично справляетесь со стрессом и находите решения в сложных ситуациях."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь держать ситуацию под контролем, но иногда теряете самообладание."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки стрессоустойчивости и управления эмоциями."
    elif data['game_type'] == 'stress_negotiations':
        if data['score'] >= 12:
            result = "12–16 баллов: Вы отлично справляетесь со стрессом и добиваетесь успеха в переговорах."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь держать ситуацию под контролем, но иногда теряете уверенность."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки стрессоустойчивости и ведения переговоров."
    elif data['game_type'] == 'stress_emergency':
        if data['score'] >= 12:
            result = "12–16 баллов: Вы отлично справляетесь с кризисами и сохраняете хладнокровие."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь держать ситуацию под контролем, но иногда теряете уверенность."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки стрессоустойчивости и управления кризисами."
    elif data['game_type'] == 'stress_multitasking':
        if data['score'] >= 12:
            result = "12–16 баллов: Вы отлично справляетесь с многозадачностью и стрессом."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь держать ситуацию под контролем, но иногда теряете фокус."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки управления временем и стрессоустойчивости."
    elif data['game_type'] == 'stress_conflict':
        if data['score'] >= 12:
            result = "12–16 баллов: Вы отлично справляетесь с конфликтами и сохраняете спокойствие."
        elif data['score'] >= 6:
            result = "6–11 баллов: Вы стараетесь держать ситуацию под контролем, но иногда теряете уверенность."
        else:
            result = "0–5 баллов: Вам стоит развивать навыки управления конфликтами и эмоционального интеллекта."
    elif data['game_type'] == 'crisis_leader':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы — сильный лидер, способный вести команду через кризис."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы справляетесь, но не всегда учитываете эмоции команды."
        else:
            result = "0–3 балла: Вам стоит развивать эмпатию и стратегическое мышление."
    elif data['game_type'] == 'team_builder':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы умеете раскрывать потенциал команды."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда не видите индивидуальных потребностей."
        else:
            result = "0–3 балла: Вам стоит учиться делегировать и мотивировать."
            
    elif data['game_type'] == 'company_strategist':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы — стратег, способный вести компанию к успеху."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы осторожны, но иногда не хватает смелости."
        else:
            result = "0–3 балла: Вам стоит развивать стратегическое видение."
    elif data['game_type'] == 'innovator_leader':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы — новатор, умеющий вести за собой."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы пытаетесь меняться, но иногда теряете поддержку."
        else:
            result = "0–3 балла: Вам стоит учиться управлять изменениями."
            
    elif data['game_type'] == 'leadership_exam':
        if data['score'] >= 8:
            result = "8–10 баллов: Вы — этичный лидер с сильными принципами."
        elif data['score'] >= 4:
            result = "4–7 баллов: Вы стараетесь, но иногда идёте на компромиссы."
        else:
            result = "0–3 балла: Вам стоит пересмотреть свои ценности."
    elif data['game_type'] == 'new_start':
        if data['score'] >= 8:
            result = "8-10 баллов: Вы быстро учитесь и адаптируетесь."
        elif data['score'] >= 5:
            result = "5-7 баллов: Вы стараетесь, но иногда нуждаетесь в поддержке."
        else:
            result = "0-4 балла: Вам стоит активнее принимать вызовы."
            
    elif data['game_type'] == 'tech_challenge':
        if data['score'] >= 8:
            result = "8-10 баллов: Вы — tech-savvy, легко осваиваете новое."
        elif data['score'] >= 5:
            result = "5-7 баллов: Вы адаптивны, но нуждаетесь в мотивации."
        else:
            result = "0–4 баллов: Вам стоит развивать любознательность."
    elif data['game_type'] == 'crisis_analyst':
        if data['score'] >= 8:
            result = "8-10 баллов: Вы сохраняете хладнокровие и быстро адаптируетесь."
        elif data['score'] >= 4:
            result = "4-7 баллов: Вы справляетесь, но теряетесь в острых ситуациях."
        else:
            result = "0–3 баллов: Вам стоит тренировать стрессоустойчивость."
            
    elif data['game_type'] == 'multicultural_code':
        if data['score'] >= 8:
            result = "8-10 баллов: Вы — мастер культурной адаптации."
        elif data['score'] >= 4:
            result = "4-7 баллов: Вы стараетесь, но иногда не хватает гибкости."
        else:
            result = "0–3 баллов: Вам стоит развивать эмпатию к другим культурам."

    elif data['game_type'] == 'skill_evolution':
        if data['score'] >= 8:
            result = "8-10 баллов: Вы готовы к постоянной трансформации."
        elif data['score'] >= 4:
            result = "4-7 баллов: Вы развиваетесь, но медленнее, чем мир."
        else:
            result = "0–3 баллов: Вам стоит пересмотреть отношение к изменениям."

    # ... остальная часть функции остается без изменений ...
    # ... остальная часть функции остается без изменений ...

    # Сохранение
    record = {
        'category': data['current_game']['category'],
        'name': data['current_game']['name'],
        'result': result,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    
    if str(chat_id) not in user_results:
        user_results[str(chat_id)] = []
    user_results[str(chat_id)].append(record)
    save_data()

    # Отправка результата
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Сыграть ещё', 'Основное меню')
    
    bot.send_message(chat_id, f"🏆 Ваш результат: {data['score']} баллов\n{result}")
    bot.send_message(chat_id, "✅ Результаты сохранены!", reply_markup=markup)
    del user_data[chat_id]

def finish_game(chat_id):
    data = user_data.get(chat_id)
    if not data:
        return

    game_type = data['game_type']
    score = data['score']
    game_name = data['current_game']['name']

    # Отправляем результаты игры
    bot.send_message(chat_id, f"Игра '{game_name}' завершена! Ваш результат: {score} баллов.")

    # Очищаем данные пользователя
    del user_data[chat_id]

    # Возвращаем пользователя в главное меню
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Назад в главное меню')
    bot.send_message(chat_id, "Вы можете вернуться в главное меню.", reply_markup=markup)
    
@bot.message_handler(func=lambda m: m.text == 'Назад в тренировки')
def back_to_trainings(message):
    trainings(message)

@bot.message_handler(func=lambda m: m.text == 'Назад в мини-игры')
def back_to_mini_games(message):
    mini_games(message)

@bot.message_handler(func=lambda m: m.text == 'Сыграть ещё')
def play_again(message):
    mini_games(message)
# endregion

# Игнорирование запросов, связанных с файлами
@bot.message_handler(content_types=['document'])
def ignore_files(message):
    pass

# Запуск бота
if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"Ошибка в основном цикле бота: {e}")
            time.sleep(5)  # Пауза перед повторным запуском
