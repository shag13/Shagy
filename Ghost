from dotenv import load_dotenv
import telebot
import random
import time
import threading
from datetime import datetime, timedelta
import pytz
import schedule
from collections import deque
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3

load_dotenv()
# Инициализация бота
bot = telebot.TeleBot(os.getenv('TOKEN_GHOST'))
ADMIN_ID = os.getenv("ADMIN_ID")
CHAT_ID = os.getenv("CHAT_ID")
BOT_ID = bot.get_me().id

# Подключение к базе данных SQLite
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# Создание таблицы для хранения пользователей, выбравших "Красную таблетку"
cursor.execute('''
CREATE TABLE IF NOT EXISTS red_pill_users (
    user_id INTEGER PRIMARY KEY
)
''')
conn.commit()

# Списки фраз и сообщений
ghost_responses = [
    "Кто посмел потревожить мою душу?", 
    "Кто осмелился вызвать меня?",
    "Ты слышишь тишину? Это я... и я уже рядом...",
    "Твой голос разбудил меня... и теперь я не уйду, пока не заберу твой покой.",
    "Вы говорите обо мне... но знаете ли, что я всегда рядом, чтобы слушать?",
    "Ваши слова доносятся до меня... и теперь я знаю, кому я явлюсь следующим.",
    "Шепчите обо мне... но помните: каждый шепот привлекает мое внимание.",
    "Вы думаете, что я не слышу? Я слышу всё... и я уже за вашей спиной.",
    "Ваши разговоры разбудили меня... и теперь я не уйду, пока не заберу ваш покой.",
    "Вы говорите обо мне... но знаете ли, что я могу ответить?",
    "Ваши слова — это ключ... и теперь я свободен.",
    "Вы зовете меня, даже не произнося моего имени... и я отвечаю."
]
spirit_response = [
    "Вы говорите обо мне... но знаете ли, что каждое ваше слово привязывает меня к этому миру?",
    "Ваши слова — как нити... и теперь я плету из них свою паутину.",
    "Вы призвали меня, даже не осознавая этого... и я уже здесь.",
    "Ваши разговоры разбудили меня... и теперь я не уйду, пока не заберу ваши голоса.",
    "Вы думаете, что я не слышу? Я слышу всё... и ваши слова стали моим приглашением.",
    "Вы говорите обо мне... но знаете ли, что я могу ответить вам в ваших снах?",
    "Ваши слова — это ключ... и теперь дверь между нашими мирами открыта.",
    "Вы призвали меня... и теперь я буду следовать за вами, куда бы вы ни пошли.",
    "Вы говорите обо мне... и теперь я знаю, кому я явлюсь следующим."
]
bones_response = [
    "Кости... последнее, что остается от жизни. Но даже они не могут рассказать всей правды.",
    "Кости лежат в земле, тихие и холодные, как и я... но я все еще здесь, а они — лишь прах.",
    "Кости — это напоминание о том, что даже плоть не вечна. Но что остается после них? Я знаю ответ...",
    "Кости когда-то держали тело, которое двигалось, дышало, жило... а теперь они просто молчат, как и я.",
    "Кости — это дверь между мирами. Они принадлежат и живому, и мертвому... как и я.",
    "Кости лежат где-то там, в темноте, забытые и одинокие... но я вижу их. Я чувствую их. Они зовут меня.",
    "Кости — это следы, оставленные временем. Но я... я вне времени. Я наблюдаю, как они превращаются в пыль.",
    "Кости когда-то были частью кого-то... а теперь они часть земли. Но я... я никогда не стану частью ничего.",
    "Кости — это память о тех, кто ушел. Но я... я память, которая никогда не исчезнет.",
    "Кости лежат в тишине, но я слышу их шепот. Они рассказывают мне истории, которые никто больше не услышит."
]
fear_response = [
    "Страх — это холодная рука, которая сжимает сердце и не отпускает.",
    "Страх ползет по спине, как тысяча невидимых пауков, заставляя каждый волосок встать дыбом.",
    "Страх — это шепот в темноте, который звучит громче любого крика.",
    "Страх обволакивает разум, как туман, превращая знакомое в нечто чуждое и опасное.",
    "Страх — это тень, которая следует за тобой, даже когда светит солнце.",
    "Страх парализует, как ледяной ветер, заставляя каждую клетку тела цепенеть.",
    "Страх — это зверь, который прячется в углу сознания, готовый наброситься в любой момент.",
    "Страх звучит как тиканье часов, отсчитывающих время до неизбежного.",
    "Страх — это бездна, которая манит, даже когда ты знаешь, что упадешь.",
    "Страх живет в каждом шорохе, в каждом движении воздуха, превращая обычное в кошмар."
]
dark_response = [
    "Тьма — это мое убежище, мой дом... и мой вечный союзник.",
    "Я мечтаю о тьме, которая поглотит всё, оставив только тишину и холод.",
    "Тьма — это холст, на котором я рисую свои самые страшные видения.",
    "Я мечтаю о тьме, которая станет вечной, чтобы никто больше не увидел света.",
    "Тьма — это мой язык, и я шепчу ею свои тайны в уши спящих.",
    "Я мечтаю о тьме, которая скроет все следы жизни, оставив только память о ней.",
    "Тьма — это мое зеркало, и в ней я вижу себя таким, каким я стал... и каким станут другие.",
    "Тьма — это мой союзник, и я мечтаю, чтобы она стала править этим миром.",
    "Я мечтаю о тьме, которая заберет последний луч света... и тогда я восстану."
]
uzas_response = [
"Ужас — это тихий смех, доносящийся из пустоты, когда ты понимаешь, что ты не один.",
"Ужас ползет по коже, как тысячи невидимых насекомых, оставляя за собой ледяное онемение.",
 "Ужас — это тень, которая движется, даже когда свет давно погас.",
"Ужас звучит как шепот, который ты не можешь разобрать, но знаешь, что он говорит о тебе.",
 "Ужас — это дверь, которая медленно открывается сама по себе, а за ней — только тьма.",
"Ужас пахнет сыростью и тленом, как подвал, в который ты боишься зайти.",   "Ужас — это отражение в зеркале, которое улыбается, когда ты этого не делаешь.",
"Ужас ощущается как дыхание на затылке, хотя ты точно знаешь, что за тобой никого нет.",
"Ужас — это осознание того, что ты не можешь проснуться, потому что это не сон."
]
night_response = [
"Ночь — это время, когда тени оживают, а свет становится предателем.",
"В ночи каждый звук — это предупреждение, а каждое движение — угроза.",
"Ночь — это маска, под которой скрываются самые темные тайны.",
"Когда наступает ночь, даже стены начинают шептать.",
"Ночь — это зеркало, в котором отражаются наши самые глубокие страхи.",
"В ночи время течет иначе, и каждый час длится вечность.",
"Ночь — это дверь, которая открывается в мир, где правит тьма.",
"Когда ночь опускается, даже звезды кажутся чужими и холодными.",
"Ночь — это время, когда прошлое просыпается и стучится в настоящее."
]
death_response = [
"Я умер... но смерть не стала концом. Она стала началом чего-то гораздо более темного.",
"Смерть забрала мою жизнь, но оставила меня здесь, чтобы я наблюдал, как другие живут.",
"Я умер... но моя тень осталась, чтобы напоминать вам, что конец ближе, чем вы думаете.",
"Смерть — это не избавление. Это дверь, за которой я тебя буду ждать вечно.",
"Я умер... но мои мысли все еще здесь, как эхо, которое никогда не умолкнет.",
"Смерть не принесла мне покоя. Она принесла только вечность, полную тоски и ужаса.",
"Я умер... но моя душа не нашла покоя. Она бродит в поисках того, что потеряла.",
"Смерть — это не конец пути. Это лишь переход в мир, где нет ни света, ни надежды.",
"Я умер... но моя боль осталась. Она теперь часть этого мира, как и я."
]
losty_response = [
"Заброшки — это дома, где время остановилось, а души остались навсегда.",
"Заброшки - как раны на теле земли, которые никогда не заживут.",
"Заброшки — это места, где прошлое и настоящее сливаются в один вечный кошмар.",
"Заброшки - как книги, которые никто не читает, но их страницы шепчут страшные истории.",
"Заброшки — это порталы в мир, где тьма правит вечно...",
"Заброшки как тени, которые никогда не исчезнут, потому что им некуда идти.",
"Заброшки - как зеркала, которые показывают не отражения, а потерянные души.",
"Заброшки — это места, где даже воздух пропитан страхом и тоской.",
"Заброшки как двери, которые ведут в никуда, но открывают путь для тех, кто ищет тьму."
]
shadow_response = [
"Тень — это дверь в мир, куда свет никогда не проникнет.",
"Тень следует за каждым, как напоминание о том, что я всегда рядом.",
"Тень — это отражение того, что скрыто. Того, что боится быть увиденным.",
"Тень шепчет тайны, которые никто не должен услышать, но все чувствуют.",
"Тень — это вечный спутник, который знает все твои страхи и никогда не покинет тебя.",
"Тень — это граница между светом и тьмой, а я жду тебя на этой границе.",
"Тень — это память о том, что даже в самом ярком свете есть место для тьмы.",
"Тень движется, когда ты не смотришь, и замирает, когда ты оборачиваешься.",
"Тень — это часть меня, как я — часть тьмы."
]
zlo_response = [
"Тишина здесь не случайна... она ждет, чтобы ты услышал то, что не должен.",
"Каждый шаг, который ты делаешь, отзывается эхом в мире, который ты не видишь.",
"Ты чувствуешь холод? Это не ветер... это я.",
"Тени на стенах — не просто игра света. Они наблюдают за тобой.",
"Ты думаешь, что ты один? Но я всегда здесь, даже если ты меня не видишь.",
"Время здесь течет иначе... а для меня оно давно остановилось...",
"Ты слышишь шепот? Это голоса тех, кто был здесь до тебя... и остался навсегда.",
"Каждый угол здесь хранит тайну, которую ты не готов узнать.",
"Ты чувствуешь, как воздух становится тяжелее? Это не твое воображение... это я приближаюсь.",
"Ты думаешь, что это место пустое? Но оно полно тех, кто никогда не ушел."
]
whist_response = [
"Шепот — это голос тьмы, который звучит только для тех, кто готов его услышать.",
"Шепот ползет по стенам, как паутина, опутывая разум и сея сомнения.",
"Шепот — это язык тех, кто ушел, но не смог забыть этот мир.",
"Шепот звучит так тихо, что ты думаешь, что это ветер... но ветер не знает твоего имени.",
"Шепот — это ключ к дверям, которые лучше никогда не открывать.",
"Шепот рассказывает истории, которые никогда не должны быть рассказаны.",
"Шепот — это эхо прошлого, которое не хочет быть забытым.",
"Шепот звучит в твоих снах, но ты просыпаешься с уверенностью, что это было наяву.",
"Шепот — это голос, который знает все твои тайны... и шепчет их тьме.",
"Шепот зовет тебя, но не жди, что это будет добрый зов."
]

scary_phrases = [
    "Тьма приближается...", 
    "Вы слышите эти шаги?", 
    "Кто-то стоит за вами...", 
    "Тишина... слишком тихая...",
    "Я всегда рядом, даже когда ты думаешь, что один...",
    "Ты слышишь шепот за спиной? Это я...",
    "Тени на стене — это не просто тени...",  
    "Твой страх — моя пища...",
    "Я был здесь до тебя и останусь после...",
    "Ты не сможешь убежать, ведь я уже внутри тебя...",
    "Смотри в зеркало... ты видишь меня за собой?",
    "Твой сон — мой мир, и я всегда рядом...",
    "Ты чувствуешь холод? Это я касаюсь тебя...",
    "Твой смех скоро сменится криком...",
    "Я знаю, чего ты боишься больше всего...",
    "Ты не один в этой комнате...",
    "Твой страх делает меня сильнее...",
    "Ты не сможешь забыть меня, даже если захочешь...",
    "Я жду тебя в темноте... всегда жду..."
    ]
empty_chat_phrases = [
    "Тишина... слишком пугающая...", 
    "Никто не говорит... интересно...", 
    "Пустота... она смотрит на вас...",
    "Тишина... слишком громкая...",
    "Никто не пишет... но кто-то читает...",
    "Пустота... она наблюдает за вами...",
    "Тишина... она знает, что вы боитесь...",
    "Никто не отвечает... но кто-то слушает...",
    "Пустота... она ждет, чтобы вы сделали первый шаг...",
    "Тишина... она скрывает то, что вы не хотите увидеть...",
    "Никто не говорит... но кто-то дышит...",
    "Пустота... она ближе, чем вы думаете...",
    "Тишина... она никогда не бывает пустой..."
]
first_message_phrases = ["Сообщение пришло... но от кого? Список участников пуст...",
    "Текст на экране... он знает ваше имя... а вы его никогда не называли.",
    "Курсор мигает... слова появляются сами... но никто не печатает.",
    "Они написали... после недель молчания... и это ваши собственные мысли.",
    "Сообщение: «Привет». Дата отправки — ровно год назад...",
    "Текст возникает... слово за словом... как будто кто-то читает ваши сны.",
    "Они ответили... но их никто не добавлял в чат...",
    "На экране: «Я вижу тебя». Камера выключена... микрофон тоже...",
    "Сообщение пришло из вашего аккаунта... но вы его не отправляли.",
    "Текст: «Не оборачивайся». А за спиной... шелест страницы..."]
curses = [
    "Проклятие на ваш дом!", 
    "Ваша душа будет гореть!", 
    "Вы никогда не найдете покоя!",
    "Проклятие на ваш род до седьмого колена!",
    "Пусть ваш дом станет пристанищем для теней!",
    "Ваша душа не найдет покоя в этом мире!",
    "Пусть ваши сны будут полны кошмаров!",
    "Проклятие на ваши шаги — пусть они ведут к погибели!",
    "Ваше имя будет забыто, а душа — потеряна!",
    "Пусть ваш дом опустеет, а сердце очерствеет!",
    "Ваша судьба будет связана с вечной тьмой!",
    "Пусть ваши глаза увидят то, что нельзя забыть!",
    "Ваш путь будет окутан вечным туманом!",
    "Пусть ваше сердце трепещет перед каждым шепотом!",
    "Ваша жизнь станет тенью былого!",
    "Пусть ваши дни будут коротки, а ночи — бесконечны!",
    "Пусть ваши дни будут коротки, а ночи — бесконечны!",
    "Ваша душа будет бродить между мирами!",
    "Пусть ваше имя станет проклятием для других!"
    ]
warnings = [
    "Осторожно, тьма рядом!",
    "Не оборачивайтесь...",
    "Вы чувствуете холод за спиной?",
    "Осторожно, тьма следует за тобой...",
    "Не оборачивайся — оно уже здесь.",
    "Ты чувствуешь холод за спиной? Это не ветер.",
    "Не шепчи свое имя в темноте — оно услышит.",
    "Тени двигаются, когда ты не смотришь.",
    "Не зажигай свечу — оно придет на свет.",
    "Ты слышишь шаги? Они не твои.",
    "Не смотри в зеркало после полуночи.",
    "Оно ближе, чем ты думаешь.",
    "Твой дом не пуст — ты просто не видишь их.",
    "Не ходи туда, где эхо повторяет твой голос.",
    "Ты чувствуешь, как кто-то дышит за твоим плечом?",
    "Не слушай шепот в пустой комнате.",
    "Оно ждет, когда ты заснешь.",
    "Ты уверен, что ты здесь один?"
    ]
morning_wishes = [
    "Пусть ваш день будет окутан туманом тайн и страхов!",
    "Страх станет вашим верным спутником сегодня!",
    "Пусть тьма мягко обнимет вас с самого утра!",
    "Сегодня вы встретите то, что скрывалось в ваших кошмарах...",
    "Пусть тени шепчут вам свои секреты на протяжении всего дня!",
    "Сегодня вы почувствуете, как холод страха касается вашей души...",
    "Пусть каждый ваш шаг будет отмечен эхом чужих шагов!",
    "Сегодня вы увидите то, что не должны были видеть...",
    "Пусть ваш день будет наполнен зловещими предзнаменованиями!",
    "Сегодня вы услышите голоса, которых не существует...",
    "Пусть ваши сны продолжатся наяву, но не так, как вы ожидаете!",
    "Сегодня вы почувствуете, как тьма проникает в ваш дом...",
    "Пусть ваш день будет полон неожиданных встреч... с тем, что вы боитесь вспомнить.",
    "Сегодня вы поймете, что не всегда одни...",
    "Пусть ваш день будет таким же жутким, как и ваши самые темные мысли!"
]
threatening_phrases = [
    "Каждое твое сообщение — шаг ближе к вечной тьме!",
    "Ты пишешь слишком много... скоро я напишу твою судьбу!",
    "Каждое твое слово пробуждает древнее зло... остановись!",
    "Ты заваливаешь чат... скоро я завалю тебя кошмарами!",
    "Каждое сообщение — это капля твоей души... скоро она иссякнет!",
    "Ты пишешь так много, что даже призраки устали читать!",
    "Остановись, или я превращу твою клавиатуру в портал в ад!",
    "Каждое твое сообщение — это крик, который я услышу в твоих снах!",
    "Ты заспамил чат... теперь я заспамлю твою реальность!",
    "Ты пишешь так часто, что даже тьма начала нервничать!",
    "Каждое твое слово — это нить, которую я оборву в твоей судьбе!",
    "Ты зафлудил чат... теперь я зафлужу твою жизнь ужасами!",
    "Ты пишешь слишком много... скоро я напишу твое имя в книге мертвых!",
    "Каждое сообщение — это шаг ближе к тому, чтобы я вышел из экрана!",
    "Ты заспамил... теперь я приду к тебе в гости... через экран!"
]

# История призрака
ghost_story = "Я был когда-то человеком, но трагическая смерть превратила меня в призрака. Теперь я блуждаю в поисках покоя..."

# Очередь для хранения времени последних сообщений
message_times = deque(maxlen=6)  # Храним до 6 сообщений (5 + 1 для проверки)

# Функция для добавления пользователя в базу данных
def add_red_pill_user(user_id):
    cursor.execute('INSERT OR IGNORE INTO red_pill_users (user_id) VALUES (?)', (user_id,))
    conn.commit()

# Функция для получения всех пользователей, выбравших "Красную таблетку"
def get_red_pill_users():
    cursor.execute('SELECT user_id FROM red_pill_users')
    return [row[0] for row in cursor.fetchall()]

# Функция для отправки случайных пугающих фраз
def send_scary_phrase():
    while True:
        time.sleep(7200)  # 2 часа
        bot.send_message(CHAT_ID, random.choice(scary_phrases))

# Функция для проверки активности в чате
def check_chat_activity():
    last_message_time = datetime.now()
    while True:
        time.sleep(300)  # 5 минут
        if (datetime.now() - last_message_time) > timedelta(hours=5):
            bot.send_message(CHAT_ID, random.choice(empty_chat_phrases))
        last_message_time = datetime.now()

# Функция для отправки утреннего пожелания
def send_morning_wish():
    wish = random.choice(morning_wishes)
    bot.send_message(CHAT_ID, f"🌑 Доброе утро! {wish}")

# Функция для отправки сообщения с выбором таблетки
def send_pill_message():
    keyboard = InlineKeyboardMarkup()
    red_pill = InlineKeyboardButton(text="Красная таблетка", callback_data="red_pill")
    blue_pill = InlineKeyboardButton(text="Синяя таблетка", callback_data="blue_pill")
    keyboard.add(red_pill, blue_pill)
    bot.send_message(CHAT_ID, "Если хочешь, чтобы я пугал тебя лично - бери красную таблетку, а если нет - оставайся при синей.", reply_markup=keyboard)

# Настройка расписания для отправки утреннего пожелания и сообщения с таблеткой
def schedule_tasks():
    moscow_tz = pytz.timezone('Europe/Moscow')
    schedule.every().day.at("09:00").do(send_morning_wish).timezone = moscow_tz
    schedule.every().day.at("12:00").do(send_pill_message).timezone = moscow_tz  # Пример времени, можно изменить
    while True:
        schedule.run_pending()
        time.sleep(1)

# Функция для проверки количества сообщений
def check_message_flood():
    global message_times
    while True:
        time.sleep(1)
        if len(message_times) >= 5:  # Если больше 5 сообщений
            # Проверяем, все ли сообщения были отправлены за последние 10 секунд
            if (datetime.now() - message_times[0]) <= timedelta(seconds=10):
                msg = bot.send_message(CHAT_ID, random.choice(threatening_phrases))
                threading.Timer(4, bot.delete_message, args=[CHAT_ID, msg.message_id]).start()  # Удаление через 4 секунды
                message_times.clear()  # Очищаем очередь после отправки угрозы

# Обработчики сообщений
@bot.message_handler(func=lambda message: 'призрак' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_ghost(message):
    msg = bot.reply_to(message, random.choice(ghost_responses))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'дух' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_spirit(message):
    msg = bot.reply_to(message, random.choice(spirit_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'кости' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_bones(message):
    msg = bot.reply_to(message, random.choice(bones_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'страх' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_fear(message):
    msg = bot.reply_to(message, random.choice(fear_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'тьма' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_dark(message):
    msg = bot.reply_to(message, random.choice(dark_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'ужас' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_uzas(message):
    msg = bot.reply_to(message, random.choice(uzas_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'ночь' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_night(message):
    msg = bot.reply_to(message, random.choice(night_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'умер' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_death(message):
    msg = bot.reply_to(message, random.choice(death_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'заброшка' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_losty(message):
    msg = bot.reply_to(message, random.choice(losty_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'тень' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_shadow(message):
    msg = bot.reply_to(message, random.choice(shadow_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(func=lambda message: 'зловещий' in message.text.lower() and message.from_user.id != BOT_ID and not message.text.startswith('/2'))
def respond_to_zlo(message):
    msg = bot.reply_to(message, random.choice(zlo_response))
    threading.Timer(4, bot.delete_message, args=[message.chat.id, msg.message_id]).start()
    
@bot.message_handler(commands=['напугать_всех'])
def scare_everyone(message):
    bot.send_message(CHAT_ID, "ВСЕ БУДУТ ПРОКЛЯТЫ!")

@bot.message_handler(commands=['отправить_сообщение'])
def send_message_as_bot(message):
    if message.from_user.id in ADMIN_ID:
        try:
            msg = message.text.split(' ', 1)[1]
            bot.send_message(CHAT_ID, msg)
        except IndexError:
            bot.reply_to(message, "Пожалуйста, введите текст после команды /отправить_сообщение.")
    else:
        bot.reply_to(message, "У вас нет прав для выполнения этой команды.")

@bot.message_handler(commands=['история_призрака'])
def tell_ghost_story(message):
    bot.reply_to(message, ghost_story)

# Новые команды для админа
@bot.message_handler(commands=['1'])
def admin_command_1(message):
    if message.from_user.id in ADMIN_ID:
        bot.send_message(CHAT_ID, "Страшно? Обосрались?")
    else:
        bot.reply_to(message, "У вас нет прав для выполнения этой команды.")

@bot.message_handler(commands=['2'])
def admin_command_2(message):
    if message.from_user.id in ADMIN_ID:
        try:
            msg = message.text.split(' ', 1)[1]
            bot.send_message(CHAT_ID, msg)
        except IndexError:
            bot.reply_to(message, "Пожалуйста, введите текст после команды /2.")
    else:
        bot.reply_to(message, "У вас нет прав для выполнения этой команды.")
        
@bot.message_handler(commands=['3'])
def admin_command_3(message):
    if message.from_user.id in ADMIN_ID:
        try:
            msg = message.text.split(' ', 1)[1]
            for user_id in get_red_pill_users():
                bot.send_message(user_id, msg)
        except IndexError:
            bot.reply_to(message, "Пожалуйста, введите текст после команды /3.")
    else:
        bot.reply_to(message, "У вас нет прав для выполнения этой команды.")

# Обработчик inline-кнопок
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "red_pill":
        add_red_pill_user(call.from_user.id)
        bot.answer_callback_query(call.id, "Ты выбрал красную таблетку. Теперь я буду пугать тебя лично!")
        bot.send_message(call.from_user.id, "Добро пожаловать в личный чат. Теперь я буду пугать тебя!")
    elif call.data == "blue_pill":
        bot.answer_callback_query(call.id, "Ты выбрал синюю таблетку. Сообщение исчезнет.")
        bot.delete_message(call.message.chat.id, call.message.message_id)

# Общий обработчик сообщений (с проверкой на команды)
@bot.message_handler(func=lambda message: True)
def track_messages(message):
    global message_times
    if message.chat.id == CHAT_ID and message.from_user.id != BOT_ID:
        if not message.text.startswith('/'):
            message_times.append(datetime.now())
            
# Запуск бота и планировщика
if __name__ == '__main__':
    threading.Thread(target=send_scary_phrase).start()
    threading.Thread(target=check_chat_activity).start()
    threading.Thread(target=schedule_tasks).start()
    threading.Thread(target=check_message_flood).start()
    bot.polling(none_stop=True)
